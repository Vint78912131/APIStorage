{
	"info": {
		"_postman_id": "1ff3dcc4-9389-49c2-a0e3-68aaec471a47",
		"name": "Storage",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "14190038"
	},
	"item": [
		{
			"name": "Authorization Endpoints",
			"item": [
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// chack status",
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//check format",
									"pm.test(\"Response is json format\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"",
									"//check success",
									"pm.test(\"Response is success\", function () {",
									"    pm.response.to.be.success;",
									"});",
									"",
									"//check id",
									"var jsonData = JSON.parse(responseBody);",
									"pm.environment.set('id', jsonData.id);",
									"pm.test(\"id is saved\", function() {",
									"pm.expect(jsonData.id).to.eql(1);",
									"});",
									"",
									"//console.log(pm.environment.get('id'))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"fail\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v2/login/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"login",
								""
							]
						}
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}//api/v2/login/",
									"host": [
										"{{url}}"
									],
									"path": [
										"",
										"api",
										"v2",
										"login",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 22 Nov 2021 06:54:07 GMT"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Server",
									"value": "nginx"
								},
								{
									"key": "x-srv-trace",
									"value": "v=1;t=2dae815bedb04ac8"
								},
								{
									"key": "x-srv-span",
									"value": "v=1;s=723536fbf5baf571"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "120"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "118"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1637564077"
								},
								{
									"key": "ETag",
									"value": "W/\"a4-7hO0T/XLq3TuFViTu2ZVQQdIY+A\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": 1\n}"
						},
						{
							"name": "Fails",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"fail\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v2/login/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"login",
										""
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "{\n    \"message\": \"<string: error_message>\"\n}"
						}
					]
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// chack status\r",
									"pm.test(\"Response is OK\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//check success\r",
									"pm.test(\"Response is success\", function () {\r",
									"    pm.response.to.be.success;\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v2/logout/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"logout",
								""
							]
						}
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "https://192.168.12.7:4648//api/v2/logout/",
									"protocol": "https",
									"host": [
										"192",
										"168",
										"12",
										"7"
									],
									"port": "4648",
									"path": [
										"",
										"api",
										"v2",
										"logout",
										""
									]
								}
							},
							"_postman_previewlanguage": "Text",
							"header": null,
							"cookie": [],
							"body": null
						}
					]
				}
			],
			"description": "Provides 2 endpoints: `login` and `logout`",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Cluster",
			"item": [
				{
					"name": "Services",
					"item": [
						{
							"name": "/api/v2/<int:cluster_id>/services/<string:node_id>/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// chack status\r",
											"pm.test(\"Response is OK\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//check format\r",
											"pm.test(\"Response is json format\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"\r",
											"//check success\r",
											"pm.test(\"Response is success\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											"\r",
											"\r",
											"// //check scheme\r",
											"// // получаем профиль из ответа\r",
											"// var data = pm.response.json().data.data;\r",
											"\r",
											"// // описываем схему модели\r",
											"// var scheme = {\r",
											"//     // указываем тип объекта\r",
											"//     \"type\": \"object\",\r",
											"//     // указываем обязательные свойства\r",
											"//     \"required\": [\"device\", \"free_size\", \"is_ssd\", \"services\"],\r",
											"//     // описываем свойства\r",
											"//     \"properties\": {\r",
											"//         \"device\": {\"type\": \"string\"},\r",
											"//         \"free_size\": {\"type\": \"integer\"},\r",
											"//         \"is_ssd\": {\"type\": \"boolean\"},\r",
											"//         \"services\": {\"type\": \"object\"},\r",
											"//         // описываем массив\r",
											"//         \"services\": {\r",
											"//             \"type\": \"array\",\r",
											"//             // тип элементов\r",
											"//             \"items\": {\"type\": \"object\"}\r",
											"//         },\r",
											"//         // описываем вложенный объект\r",
											"//         \"services\": {\r",
											"//             \"type\": \"object\",\r",
											"//             \"properties\": {\r",
											"//                 \"device\": {\"type\": \"string\"},\r",
											"//                 \"id\": {\"type\": \"integer\"},\r",
											"//                 \"status\": {\"type\": \"string\"},\r",
											"//                 \"type\": {\"type\": \"string\"}\r",
											"//             }\r",
											"//         }\r",
											"//     }\r",
											"// };\r",
											"\r",
											"// pm.test('Schema is valid', function() {\r",
											"//     // валидируем объект profile с помощью правил из scheme\r",
											"//     var isValidScheme = tv4.validate(data, scheme, true, true);\r",
											"\r",
											"//     // ожидаем, что результат валидации true\r",
											"//     //pm.expect(isValidScheme).to.be.true;\r",
											"// });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v2/{{cluster_id}}/services/{{node_id}}/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"{{cluster_id}}",
										"services",
										"{{node_id}}",
										""
									]
								},
								"description": "Provides endpoint `services`."
							},
							"response": [
								{
									"name": "/api/v2/<int:cluster_id>/services/<string:node_id>/",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://d9d81f0e-389f-414d-87ab-009b1e420516.mock.pstmn.io/api/v2/1/services/{{node_id}}/",
											"protocol": "https",
											"host": [
												"d9d81f0e-389f-414d-87ab-009b1e420516",
												"mock",
												"pstmn",
												"io"
											],
											"path": [
												"api",
												"v2",
												"1",
												"services",
												"{{node_id}}",
												""
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": [\n        {\n            \"device\": \"<string>\",\n            \"free_size\": {{$randomInt}},\n            \"is_ssd\": {{$randomBoolean}},\n            \"services\": [\n                {\n                    \"device\": \"<string>\",\n                    \"id\": {{$randomInt}},\n                    \"status\": \"<string>\",\n                    \"type\": \"{{cs|mds}}\"\n                }\n            ],\n            \"size\": {{$randomInt}}\n        }\n    ]\n}"
								}
							]
						}
					],
					"description": "### Info about cluster services.\n\nProvides endpoint `services`."
				},
				{
					"name": "iSCSI",
					"item": [
						{
							"name": "iSCSI Users",
							"item": [
								{
									"name": "/api/v2/<int:cluster_id>/iscsi/users/",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// chack status\r",
													"pm.test(\"Response is OK\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"//check format\r",
													"pm.test(\"Response is json format\", function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"\r",
													"//check success\r",
													"pm.test(\"Response is success\", function () {\r",
													"    pm.response.to.be.success;\r",
													"});\r",
													"\r",
													"//save username\r",
													"var jsonData = JSON.parse(responseBody);\r",
													"pm.environment.set(\"username\", jsonData.data[0].username);\r",
													"// console.log(jsonData.data[0].username);\r",
													"// console.log(pm.environment.get('username'))\r",
													"pm.test(\"Username is saved\", function() {\r",
													"pm.expect(jsonData.data[0].username).to.eql(pm.environment.get('username'));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v2/{{cluster_id}}/iscsi/users/",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"{{cluster_id}}",
												"iscsi",
												"users",
												""
											]
										},
										"description": "Get iSCSI users."
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/v2/{{cluster_id}}/iscsi/users/",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"v2",
														"{{cluster_id}}",
														"iscsi",
														"users",
														""
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "",
													"type": "text"
												}
											],
											"cookie": [],
											"body": "{\n    \"data\": [\n        {\n            \"username\": \"{{$randomUserName}}\",            \n            \"is_enabled\": {{$randomBoolean}}\n        }\n    ]\n}"
										}
									]
								},
								{
									"name": "/api/v2/<int:cluster_id>/iscsi/users/",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"iscsipostusername\", pm.variables.replaceIn('{{$randomUserName}}'));",
													"pm.variables.set(\"ISCSI_POST_PASSWORD\", pm.variables.replaceIn('{{$randomPassword}}'));",
													"pm.variables.set(\"ISCSI_POST_IS_ENABLED\", pm.variables.replaceIn('{{$randomBoolean}}'));",
													"",
													"pm.variables.get('{{iscsipostusername}}');"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// chack status\r",
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"//check format\r",
													"pm.test(\"Response is json format\", function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"\r",
													"//check success\r",
													"pm.test(\"Response is success\", function () {\r",
													"    pm.response.to.be.success;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"{{ISCSI_POST_USERNAME}}\",\n    \"password\": \"{{ISCSI_POST_PASSWORD}}\",\n    \"is_enabled\": {{ISCSI_POST_IS_ENABLED}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v2/{{cluster_id}}/iscsi/users/",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"{{cluster_id}}",
												"iscsi",
												"users",
												""
											]
										},
										"description": "Add new iSCSI user."
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"username\": \"{{iscsipostusername}}\",\n    \"password\": \"{{ISCSI_POST_PASSWORD}}\",\n    \"is_enabled\": {{ISCSI_POST_IS_ENABLED}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/v2/{{cluster_id}}/iscsi/users/",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"v2",
														"{{cluster_id}}",
														"iscsi",
														"users",
														""
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "",
													"type": "text"
												}
											],
											"cookie": [],
											"body": "{\n    \"username\": \"{{$randomUserName}}\",\n    \"is_enabled\": {{$randomBoolean}}\n}"
										}
									]
								}
							]
						},
						{
							"name": "iSCSI User",
							"item": [
								{
									"name": "/api/v2/<int:cluster_id>/iscsi/users/<str:username>/",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// chack status\r",
													"// pm.test(\"Response is OK\", function () {\r",
													"//     pm.response.to.be.ok;\r",
													"// });\r",
													"\r",
													"\r",
													"// pm.test(\"Status code is 200\", function () {\r",
													"//     pm.response.to.have.status(200);\r",
													"// });\r",
													"\r",
													"//check format\r",
													"pm.test(\"Response is json format\", function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"\r",
													"//check success\r",
													"// pm.test(\"Response is success\", function () {\r",
													"//     pm.response.to.be.success;\r",
													"// });\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v2/{{cluster_id}}/iscsi/users/{{username}}/",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"{{cluster_id}}",
												"iscsi",
												"users",
												"{{username}}",
												""
											]
										},
										"description": "Get iSCSI user details."
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/v2/{{cluster_id}}/iscsi/users/{{username}}/",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"v2",
														"{{cluster_id}}",
														"iscsi",
														"users",
														"{{username}}",
														""
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "",
													"type": "text"
												}
											],
											"cookie": [],
											"body": "{\n    \"username\": \"{{$randomUserName}}\",\n    \"is_enabled\": {{$randomBoolean}}\n}"
										}
									]
								},
								{
									"name": "/api/v2/<int:cluster_id>/iscsi/users/<str:username>/",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// chack status\r",
													"// pm.test(\"Response is OK\", function () {\r",
													"//     pm.response.to.be.ok;\r",
													"// });\r",
													"\r",
													"\r",
													"// pm.test(\"Status code is 200\", function () {\r",
													"//     pm.response.to.have.status(200);\r",
													"// });\r",
													"\r",
													"//check format\r",
													"pm.test(\"Response is json format\", function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"\r",
													"//check success\r",
													"// pm.test(\"Response is success\", function () {\r",
													"//     pm.response.to.be.success;\r",
													"// });\r",
													"\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"password\": \"{{$randomPassword}}\",\n    \"is_enabled\": {{$randomBoolean}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v2/{{cluster_id}}/iscsi/users/{{username}}/",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"{{cluster_id}}",
												"iscsi",
												"users",
												"{{username}}",
												""
											]
										},
										"description": "Change iSCSI user details."
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"password\": \"{{$randomPassword}}\",\n    \"is_enabled\": {{$randomBoolean}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/v2/{{cluster_id}}/iscsi/users/{{username}}/",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"v2",
														"{{cluster_id}}",
														"iscsi",
														"users",
														"{{username}}",
														""
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "Text",
											"header": null,
											"cookie": [],
											"body": null
										}
									]
								},
								{
									"name": "/api/v2/<int:cluster_id>/iscsi/users/<str:username>/",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// chack status\r",
													"// pm.test(\"Response is OK\", function () {\r",
													"//     pm.response.to.be.ok;\r",
													"// });\r",
													"\r",
													"\r",
													"// pm.test(\"Status code is 200\", function () {\r",
													"//     pm.response.to.have.status(200);\r",
													"// });\r",
													"\r",
													"//check format\r",
													"pm.test(\"Response is json format\", function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"\r",
													"//check success\r",
													"// pm.test(\"Response is success\", function () {\r",
													"//     pm.response.to.be.success;\r",
													"// });\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v2/{{cluster_id}}/iscsi/users/{{username}}/",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"{{cluster_id}}",
												"iscsi",
												"users",
												"{{username}}",
												""
											]
										},
										"description": "Delete iSCSI user."
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{url}}/api/v2/{{cluster_id}}/iscsi/users/{{username}}/",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"v2",
														"{{cluster_id}}",
														"iscsi",
														"users",
														"{{username}}",
														""
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "Text",
											"header": null,
											"cookie": [],
											"body": null
										}
									]
								}
							]
						},
						{
							"name": "iSCSI Targets",
							"item": [
								{
									"name": "/api/v2/<int:cluster_id>/iscsi/targets/",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// chack status\r",
													"pm.test(\"Response is OK\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"//check format\r",
													"// pm.test(\"Response is json format\", function () {\r",
													"//     pm.response.to.be.json;\r",
													"// });\r",
													"\r",
													"\r",
													"//check success\r",
													"pm.test(\"Response is success\", function () {\r",
													"    pm.response.to.be.success;\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v2/{{cluster_id}}/iscsi/targets/",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"{{cluster_id}}",
												"iscsi",
												"targets",
												""
											]
										},
										"description": "Get iSCSI targets."
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/v2/{{cluster_id}}/iscsi/targets/",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"v2",
														"{{cluster_id}}",
														"iscsi",
														"targets",
														""
													]
												}
											},
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": "",
													"type": "text"
												}
											],
											"cookie": [],
											"body": "{\n   \"data\": [\n       {\n           \"iqn\": \"str\",\n           \"state\": \"str\",\n            \"node\": {\n                \"id\": \"{{$randomUUID}}\",\n                \"host\": \"{{$randomIP}}\"\n            },\n           \"ipaddrs\": [\n                \"{{$randomIP}}\"\n            ],\n           \"initiators\": \"{{$randomInt}}\",\n           \"luns\": \"{{$randomInt}}\",\n           \"owner\": str,\n           \"mut_owner\": str\n       }\n   ]\n}"
										}
									]
								},
								{
									"name": "/api/v2/<int:cluster_id>/iscsi/targets/",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// chack status\r",
													"pm.test(\"Response is OK\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"//check format\r",
													"// pm.test(\"Response is json format\", function () {\r",
													"//     pm.response.to.be.json;\r",
													"// });\r",
													"\r",
													"\r",
													"//check success\r",
													"pm.test(\"Response is success\", function () {\r",
													"    pm.response.to.be.success;\r",
													"});\r",
													"\r",
													"// pm.test(\"Status code is 404\", function () {\r",
													"//     pm.response.to.have.status(404);\r",
													"// });\r",
													"\r",
													"//save iqn\r",
													"// var jsonData = JSON.parse(responseBody);\r",
													"// pm.environment.set('iqn', jsonData.iqn);\r",
													"// console.log(jsonData);\r",
													"// pm.test(\"iqn is saved\", function() {\r",
													"// pm.expect(jsonData.iqn).to.eql(pm.environment.get('iqn'));\r",
													"// });\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"target_name_{{$randomNameSuffix}}\",\n    \"node_id\": \"{{$randomUUID}}\",\n    \"portals\": [\"portal_{{$randomNameSuffix}}\", \"portal_{{$randomNameSuffix}}\"],\n    \"owner\": \"{{$randomUserName}}\",\n    \"mut_owner\": \"{{$randomUserName}}\",\n    \"lun_size\": {{$randomInt}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v2/{{cluster_id}}/iscsi/targets/",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"{{cluster_id}}",
												"iscsi",
												"targets",
												""
											]
										},
										"description": "Add new iSCSI target."
									},
									"response": [
										{
											"name": "/api/v2/<int:cluster_id>/iscsi/targets/",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": \"target_name_{{$randomNameSuffix}}\",\n    \"node_id\": \"{{$randomUUID}}\",\n    \"portals\": [\"portal_{{$randomNameSuffix}}\", \"portal_{{$randomNameSuffix}}\"],\n    \"owner\": \"{{$randomUserName}}\",\n    \"mut_owner\": \"{{$randomUserName}}\",\n    \"lun_size\": {{$randomInt}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/v2/{{cluster_id}}/iscsi/targets/",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"v2",
														"{{cluster_id}}",
														"iscsi",
														"targets",
														""
													]
												}
											},
											"_postman_previewlanguage": "Text",
											"header": null,
											"cookie": [],
											"body": "{\n    \"iqn\": str,\n    \"state\": str,\n    \"node\": [\n        \"id\": uuid,\n        \"host\": str\n    ],\n    \"portals\": [\n        str,\n        ...\n    ],\n    \"initiators\": int,\n    \"luns\": int,\n    \"owner\": str,\n    \"mut_owner\": str\n}"
										}
									]
								}
							],
							"description": "iSCSI targets"
						},
						{
							"name": "iSCSI Target",
							"item": [
								{
									"name": "/api/v2/<int:cluster_id>/iscsi/targets/<string:iqn>/",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// chack status\r",
													"// pm.test(\"Response is OK\", function () {\r",
													"//     pm.response.to.be.ok;\r",
													"// });\r",
													"\r",
													"\r",
													"// pm.test(\"Status code is 200\", function () {\r",
													"//     pm.response.to.have.status(200);\r",
													"// });\r",
													"\r",
													"//check format\r",
													"pm.test(\"Response is json format\", function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"\r",
													"//check success\r",
													"// pm.test(\"Response is success\", function () {\r",
													"//     pm.response.to.be.success;\r",
													"// });\r",
													"\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v2/{{cluster_id}}/iscsi/targets/{{iqn}}/",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"{{cluster_id}}",
												"iscsi",
												"targets",
												"{{iqn}}",
												""
											]
										},
										"description": "Get iSCSI target."
									},
									"response": [
										{
											"name": "/api/v2/<int:cluster_id>/iscsi/targets/<string:iqn>/",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "/api/v2/<int:cluster_id>/iscsi/targets/<string:iqn>/",
													"path": [
														"api",
														"v2",
														"<int:cluster_id>",
														"iscsi",
														"targets",
														"<string:iqn>",
														""
													]
												}
											},
											"_postman_previewlanguage": "Text",
											"header": null,
											"cookie": [],
											"body": "{\n    \"iqn\": str,\n    \"state\": str,\n    \"node\": [\n        \"id\": uuid,\n        \"host\": str\n    ],\n    \"portals\": [\n        str,\n        ...\n    ],\n    \"initiators\": int,\n    \"luns\": int,\n    \"owner\": str,\n    \"mut_owner\": str\n}"
										}
									]
								},
								{
									"name": "/api/v2/<int:cluster_id>/iscsi/targets/<string:iqn>/ Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// chack status\r",
													"// pm.test(\"Response is OK\", function () {\r",
													"//     pm.response.to.be.ok;\r",
													"// });\r",
													"\r",
													"\r",
													"// pm.test(\"Status code is 200\", function () {\r",
													"//     pm.response.to.have.status(200);\r",
													"// });\r",
													"\r",
													"//check format\r",
													"pm.test(\"Response is json format\", function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"\r",
													"//check success\r",
													"// pm.test(\"Response is success\", function () {\r",
													"//     pm.response.to.be.success;\r",
													"// });\r",
													"\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"portals\":\"\",\n    \"owner\":\"username\",\n    \"mut_owner\":\"username\",\n    \"force\": \"true\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v2/{{cluster_id}}/iscsi/targets/{{iqn}}/",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"{{cluster_id}}",
												"iscsi",
												"targets",
												"{{iqn}}",
												""
											]
										},
										"description": "Change iSCSI target."
									},
									"response": [
										{
											"name": "/api/v2/<int:cluster_id>/iscsi/targets/<string:iqn>/ Copy",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"portals\": [str, ...]\n    \"owner\": str,\n    \"mut_owner\" str,\n    \"force\": bool\n}"
												},
												"url": {
													"raw": "{{url}}/api/v2/{{cluster_id}}/iscsi/targets/{{iqn}}/",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"v2",
														"{{cluster_id}}",
														"iscsi",
														"targets",
														"{{iqn}}",
														""
													]
												}
											},
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"name": "Content-Type",
													"description": "",
													"type": "text"
												}
											],
											"cookie": [],
											"body": "{\n    \"iqn\": str,\n    \"state\": str,\n    \"node\": [\n        \"id\": uuid,\n        \"host\": str\n    ],\n    \"portals\": [\n        str,\n        ...\n    ],\n    \"initiators\": int,\n    \"luns\": int,\n    \"owner\": str,\n    \"mut_owner\": str\n}"
										}
									]
								},
								{
									"name": "/api/v2/<int:cluster_id>/iscsi/targets/<string:iqn>/",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// chack status\r",
													"pm.test(\"Response is OK\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"//check success\r",
													"pm.test(\"Response is success\", function () {\r",
													"    pm.response.to.be.success;\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"//check format\r",
													"// pm.test(\"Response is json format\", function () {\r",
													"//     pm.response.to.be.json;\r",
													"// });\r",
													"\r",
													"// pm.test(\"Status code is 404\", function () {\r",
													"//     pm.response.to.have.status(404);\r",
													"// });\r",
													"\r",
													" \r",
													"//check response\r",
													"pm.test(\"Response is empty\", ()=> {\r",
													"    pm.expect(pm.response.text).to.length(0);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v2/{{cluster_id}}/iscsi/targets/{{iqn}}/",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"{{cluster_id}}",
												"iscsi",
												"targets",
												"{{iqn}}",
												""
											]
										},
										"description": "Delete iSCSI target."
									},
									"response": [
										{
											"name": "OK",
											"originalRequest": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{url}}/api/v2/{{cluster_id}}/iscsi/targets/{{iqn}}/",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"v2",
														"{{cluster_id}}",
														"iscsi",
														"targets",
														"{{iqn}}",
														""
													]
												}
											},
											"_postman_previewlanguage": "Text",
											"header": null,
											"cookie": [],
											"body": null
										}
									]
								},
								{
									"name": "/api/v2/<int:cluster_id>/iscsi/targets/<string:iqn>/start/",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// chack status\r",
													"// pm.test(\"Response is OK\", function () {\r",
													"//     pm.response.to.be.ok;\r",
													"// });\r",
													"\r",
													"\r",
													"// pm.test(\"Status code is 200\", function () {\r",
													"//     pm.response.to.have.status(200);\r",
													"// });\r",
													"\r",
													"//check format\r",
													"pm.test(\"Response is json format\", function () {\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"//check success\r",
													"// pm.test(\"Response is success\", function () {\r",
													"//     pm.response.to.be.success;\r",
													"// });\r",
													"\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"// pm.test(\"Status code is 400\", function () {\r",
													"//     pm.response.to.have.status(400);\r",
													"// });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"iqn\":\"iqn\",\n    \"state\":\"state\",\n    \"node\": [\n        {\"id\":\"1234\",\n        \"host\":\"192.168.20.5\"}\n    ],\n    \"portals\": [],\n    \"initiators\":\"1\",\n    \"luns\":\"1\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v2/{{cluster_id}}/iscsi/targets/{{iqn}}/start/",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"{{cluster_id}}",
												"iscsi",
												"targets",
												"{{iqn}}",
												"start",
												""
											]
										},
										"description": "Start iSCSI target."
									},
									"response": []
								},
								{
									"name": "/api/v2/<int:cluster_id>/iscsi/targets/<string:iqn>/stop/",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// chack status\r",
													"pm.test(\"Response is OK\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"//check format\r",
													"// pm.test(\"Response is json format\", function () {\r",
													"//     pm.response.to.be.json;\r",
													"// });\r",
													"\r",
													"//check success\r",
													"pm.test(\"Response is success\", function () {\r",
													"    pm.response.to.be.success;\r",
													"});\r",
													"\r",
													"// pm.test(\"Status code is 404\", function () {\r",
													"//     pm.response.to.have.status(404);\r",
													"// });\r",
													"\r",
													"// pm.test(\"Status code is 400\", function () {\r",
													"//     pm.response.to.have.status(400);\r",
													"// });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"force\": {{$randomBoolean}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v2/{{cluster_id}}/iscsi/targets/{{iqn}}/stop/",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"{{cluster_id}}",
												"iscsi",
												"targets",
												"{{iqn}}",
												"stop",
												""
											]
										},
										"description": "Stop iSCSI target"
									},
									"response": [
										{
											"name": "/api/v2/<int:cluster_id>/iscsi/targets/<string:iqn>/stop/",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"force\": {{$randomBoolean}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/v2/{{cluster_id}}/iscsi/targets/{{iqn}}/stop/",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"v2",
														"{{cluster_id}}",
														"iscsi",
														"targets",
														"{{iqn}}",
														"stop",
														""
													]
												}
											},
											"_postman_previewlanguage": "Text",
											"header": null,
											"cookie": [],
											"body": "{\n    \"iqn\": str,\n    \"state\": str,\n    \"node\": [\n        \"id\": uuid,\n        \"host\": str\n    ],\n    \"portals\": [\n        str,\n        ...\n    ],\n    \"initiators\": int,\n    \"luns\": int,\n}"
										}
									]
								}
							]
						},
						{
							"name": "iSCSI initiators",
							"item": [
								{
									"name": "/api/v2/<int:cluster_id>/iscsi/targets/<string:iqn>/initiators/",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// chack status\r",
													"pm.test(\"Response is OK\", function () {\r",
													"    pm.response.to.be.ok;\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"//check format\r",
													"// pm.test(\"Response is json format\", function () {\r",
													"//     pm.response.to.be.json;\r",
													"// });\r",
													"\r",
													"\r",
													"//check success\r",
													"pm.test(\"Response is success\", function () {\r",
													"    pm.response.to.be.success;\r",
													"});\r",
													"\r",
													"// pm.test(\"Status code is 404\", function () {\r",
													"//     pm.response.to.have.status(404);\r",
													"// });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v2/{{cluster_id}}/iscsi/targets/{{iqn}}/initiators/",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"{{cluster_id}}",
												"iscsi",
												"targets",
												"{{iqn}}",
												"initiators",
												""
											]
										},
										"description": "Get iSCSI initiators"
									},
									"response": [
										{
											"name": "/api/v2/<int:cluster_id>/iscsi/targets/<string:iqn>/initiators/",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/v2/{{cluster_id}}/iscsi/targets/{{iqn}}/initiators/",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"v2",
														"{{cluster_id}}",
														"iscsi",
														"targets",
														"{{iqn}}",
														"initiators",
														""
													]
												}
											},
											"_postman_previewlanguage": "json",
											"header": null,
											"cookie": [],
											"body": "{\n    \"data\": [\n        {\n            \"ipaddr\": str,\n            \"iqn\": str\n        },\n        ...\n    ]\n}"
										}
									]
								}
							]
						},
						{
							"name": "iSCSI LUN",
							"item": [
								{
									"name": "iSCSI LUN Details",
									"item": [
										{
											"name": "/api/v2/<int:cluster_id>/iscsi/targets/<string:iqn>/luns/<string:lunno>/details/",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// chack status\r",
															"pm.test(\"Response is OK\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"//check format\r",
															"// pm.test(\"Response is json format\", function () {\r",
															"//     pm.response.to.be.json;\r",
															"// });\r",
															"\r",
															"\r",
															"//check success\r",
															"pm.test(\"Response is success\", function () {\r",
															"    pm.response.to.be.success;\r",
															"});\r",
															"\r",
															"// pm.test(\"Status code is 404\", function () {\r",
															"//     pm.response.to.have.status(404);\r",
															"// });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/v2/{{cluster_id}}/iscsi/targets/{{iqn}}/luns/{{lunno}}/details/",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"v2",
														"{{cluster_id}}",
														"iscsi",
														"targets",
														"{{iqn}}",
														"luns",
														"{{lunno}}",
														"details",
														""
													]
												},
												"description": "Get iSCSI LUN detail"
											},
											"response": [
												{
													"name": "/api/v2/<int:cluster_id>/iscsi/targets/<string:iqn>/luns/<string:lunno>/details/",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{url}}/api/v2/{{cluster_id}}/iscsi/targets/{{iqn}}/luns/{{lunno}}/details/",
															"host": [
																"{{url}}"
															],
															"path": [
																"api",
																"v2",
																"{{cluster_id}}",
																"iscsi",
																"targets",
																"{{iqn}}",
																"luns",
																"{{lunno}}",
																"details",
																""
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "Text",
													"header": null,
													"cookie": [],
													"body": "{\n    \"lunno\": int,\n    \"tier\": int,\n    \"redundancy\": { # optional\n        \"type\": str, # \"raid1\" | \"raid6\"\n        \"params\": {\n            \"m\": int, # optional for raid1\n            \"n\": int\n        }\n    }\n}"
												}
											]
										}
									]
								},
								{
									"name": "iSCSI LUN",
									"item": [
										{
											"name": "/api/v2/<int:cluster_id>/iscsi/targets/<string:iqn>/luns/<string:lunno>/",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// chack status\r",
															"pm.test(\"Response is OK\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"//check format\r",
															"// pm.test(\"Response is json format\", function () {\r",
															"//     pm.response.to.be.json;\r",
															"// });\r",
															"\r",
															"\r",
															"//check success\r",
															"pm.test(\"Response is success\", function () {\r",
															"    pm.response.to.be.success;\r",
															"});\r",
															"\r",
															"// pm.test(\"Status code is 404\", function () {\r",
															"//     pm.response.to.have.status(404);\r",
															"// });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/v2/{{cluster_id}}/iscsi/targets/{{iqn}}/luns/{{lunno}}/",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"v2",
														"{{cluster_id}}",
														"iscsi",
														"targets",
														"{{iqn}}",
														"luns",
														"{{lunno}}",
														""
													]
												},
												"description": "Get iSCSI LUN detail"
											},
											"response": [
												{
													"name": "/api/v2/<int:cluster_id>/iscsi/targets/<string:iqn>/luns/<string:lunno>/",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{url}}/api/v2/{{cluster_id}}/iscsi/targets/{{iqn}}/luns/{{lunno}}/",
															"host": [
																"{{url}}"
															],
															"path": [
																"api",
																"v2",
																"{{cluster_id}}",
																"iscsi",
																"targets",
																"{{iqn}}",
																"luns",
																"{{lunno}}",
																""
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "Text",
													"header": null,
													"cookie": [],
													"body": "{\n    \"lunno\": int,\n    \"size\": int,\n    \"used\": int\n    \"description\": str,\n    \"is_online\": bool,\n}"
												}
											]
										},
										{
											"name": "/api/v2/<int:cluster_id>/iscsi/targets/<string:iqn>/luns/<string:lunno>/ Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// chack status\r",
															"pm.test(\"Response is OK\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"//check format\r",
															"// pm.test(\"Response is json format\", function () {\r",
															"//     pm.response.to.be.json;\r",
															"// });\r",
															"\r",
															"\r",
															"//check success\r",
															"pm.test(\"Response is success\", function () {\r",
															"    pm.response.to.be.success;\r",
															"});\r",
															"\r",
															"// pm.test(\"Status code is 404\", function () {\r",
															"//     pm.response.to.have.status(404);\r",
															"// });\r",
															"\r",
															"//check response\r",
															"pm.test(\"Response is empty\", ()=> {\r",
															"    pm.expect(pm.response.text).to.length(0);\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [],
												"url": {
													"raw": "{{url}}/api/v2/{{cluster_id}}/iscsi/targets/{{iqn}}/luns/{{lunno}}/",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"v2",
														"{{cluster_id}}",
														"iscsi",
														"targets",
														"{{iqn}}",
														"luns",
														"{{lunno}}",
														""
													]
												},
												"description": "Delete iSCSI LUN"
											},
											"response": [
												{
													"name": "/api/v2/<int:cluster_id>/iscsi/targets/<string:iqn>/luns/<string:lunno>/ Copy",
													"originalRequest": {
														"method": "DELETE",
														"header": [],
														"url": {
															"raw": "{{url}}/api/v2/{{cluster_id}}/iscsi/targets/{{iqn}}/luns/{{lunno}}/",
															"host": [
																"{{url}}"
															],
															"path": [
																"api",
																"v2",
																"{{cluster_id}}",
																"iscsi",
																"targets",
																"{{iqn}}",
																"luns",
																"{{lunno}}",
																""
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "Text",
													"header": null,
													"cookie": [],
													"body": null
												}
											]
										}
									]
								},
								{
									"name": "iSCSI LUNs",
									"item": [
										{
											"name": "/api/v2/<int:cluster_id>/iscsi/targets/<string:iqn>/luns/",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// chack status\r",
															"pm.test(\"Response is OK\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"//check format\r",
															"// pm.test(\"Response is json format\", function () {\r",
															"//     pm.response.to.be.json;\r",
															"// });\r",
															"\r",
															"\r",
															"//check success\r",
															"pm.test(\"Response is success\", function () {\r",
															"    pm.response.to.be.success;\r",
															"});\r",
															"\r",
															"// pm.test(\"Status code is 404\", function () {\r",
															"//     pm.response.to.have.status(404);\r",
															"// });"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\"cluster_name\":\"clusterName4\",\r\n\"host\":\"253.55.199.85\",\r\n\"password\":\"Wj7FaYx7Lcy0TpH\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/v2/{{cluster_id}}/iscsi/targets/{{iqn}}/luns/",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"v2",
														"{{cluster_id}}",
														"iscsi",
														"targets",
														"{{iqn}}",
														"luns",
														""
													]
												},
												"description": "iSCSI LUNs"
											},
											"response": [
												{
													"name": "/api/v2/<int:cluster_id>/iscsi/targets/<string:iqn>/luns/",
													"originalRequest": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{url}}/api/v2/{{cluster_id}}/iscsi/targets/{{iqn}}/luns/",
															"host": [
																"{{url}}"
															],
															"path": [
																"api",
																"v2",
																"{{cluster_id}}",
																"iscsi",
																"targets",
																"{{iqn}}",
																"luns",
																""
															]
														}
													},
													"_postman_previewlanguage": "Text",
													"header": null,
													"cookie": [],
													"body": "{\n    \"data\": [\n        {\n            \"lunno\": int,\n            \"size\": int,\n            \"used\": int\n            \"description\": str,\n            \"is_online\": bool,\n        },\n        ...\n    ]\n}"
												}
											]
										},
										{
											"name": "/api/v2/<int:cluster_id>/iscsi/targets/<string:iqn>/luns/ Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// chack status\r",
															"pm.test(\"Response is OK\", function () {\r",
															"    pm.response.to.be.ok;\r",
															"});\r",
															"\r",
															"\r",
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"//check format\r",
															"// pm.test(\"Response is json format\", function () {\r",
															"//     pm.response.to.be.json;\r",
															"// });\r",
															"\r",
															"//check success\r",
															"pm.test(\"Response is success\", function () {\r",
															"    pm.response.to.be.success;\r",
															"});\r",
															"\r",
															"// pm.test(\"Status code is 404\", function () {\r",
															"//     pm.response.to.have.status(404);\r",
															"// });"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"lunno\": \"1\",\n    \"size\": \"100\",\n    \"description\": \"lun\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/v2/{{cluster_id}}/iscsi/targets/{{iqn}}/luns/",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"v2",
														"{{cluster_id}}",
														"iscsi",
														"targets",
														"{{iqn}}",
														"luns",
														""
													]
												},
												"description": "Add new iSCSI LUN"
											},
											"response": [
												{
													"name": "/api/v2/<int:cluster_id>/iscsi/targets/<string:iqn>/luns/ Copy",
													"originalRequest": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"lunno\": int,\n    \"size\": int\n    \"description\": str\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{url}}/api/v2/{{cluster_id}}/iscsi/targets/{{iqn}}/luns/",
															"host": [
																"{{url}}"
															],
															"path": [
																"api",
																"v2",
																"{{cluster_id}}",
																"iscsi",
																"targets",
																"{{iqn}}",
																"luns",
																""
															]
														}
													},
													"_postman_previewlanguage": "Text",
													"header": null,
													"cookie": [],
													"body": "{\n    \"lunno\": int,\n    \"size\": int,\n    \"used\": int\n    \"description\": str,\n    \"is_online\": bool,\n}"
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Clusters",
					"item": [
						{
							"name": "/api/v2/clusters/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// chack status\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"//check format\r",
											"pm.test(\"Response is json format\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"\r",
											"//check success\r",
											"pm.test(\"Response is success\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											"\r",
											"//save task_id\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set('task_id', jsonData.task_id);\r",
											"pm.test(\"task_id is saved\", function() {\r",
											"pm.expect(jsonData.task_id).to.eql(pm.environment.get(\"task_id\"));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"cluster_name\" : \"ClusterName{{$randomAlphaNumeric}}\",\n    \"host\" : \"{{$randomIP}}\",\n    \"password\" : \"{{$randomPassword}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v2/clusters/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"clusters",
										""
									]
								},
								"description": "Start task which register cluster in server database.\n\n**Request**\n\n`password` is optional. It requires later, on authenticate new node in this cluster.\n\n**Response**\n\n..."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"cluster_name\" : \"<string: cluster name>\",\n    \"host\" : \"<string: host address>\",\n    \"password\" : \"<string: cluster password>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v2/clusters/",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"clusters",
												""
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"task_id\": \"{{$randomUUID}}\"\n}"
								}
							]
						},
						{
							"name": "/api/v2/clusters/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// chack status\r",
											"pm.test(\"Response is OK\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//check format\r",
											"pm.test(\"Response is json format\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"//check success\r",
											"pm.test(\"Response is success\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v2/clusters/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"clusters",
										""
									]
								},
								"description": "Provides info about clusters list in database.\n\n`status` is optional. If this field exists it indicates that exists async task running on this cluster.\n\n`id` is optional. This field may be missed if cluster has not added in database yet, but adding task already exists."
							},
							"response": [
								{
									"name": "/api/v2/clusters/",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v2/clusters/",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"clusters",
												""
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": [\n        {\n            \"name\": \"ClusterName{{$randomNameSuffix}}\", \n            \"task\": {\n                \"state\": \"<string: task state>\", \n                \"operation\": \"<string: operation type, e.g. \\\"ADDING\\\">\", \n                \"task_id\": \"{{$randomUUID}}\"\n            }, \n            \"id\": \"{{$randomInt}}\", \n            \"nodes\": [\n                \"{{$randomUUID}}\"\n            ]\n        }, \n        {\n            \"name\": \"ClusterName{{$randomNameSuffix}}\", \n            \"status\": {\n                \"state\": \"<string: task state>\", \n                \"operation\": \"<string: operation type, e.g. \\\"ADDING\\\">\", \n                \"task_id\": \"{{$randomUUID}}\"\n            }\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "/api/v2/clusters/<int:cluster_id>/password/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// chack status\r",
											"pm.test(\"Response is OK\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//check format\r",
											"// pm.test(\"Response is json format\", function () {\r",
											"//     pm.response.to.be.json;\r",
											"// });\r",
											"\r",
											"//check success\r",
											"pm.test(\"Response is success\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											"\r",
											"//save cluster password\r",
											"// var jsonData = JSON.parse(responseBody);\r",
											"// pm.environment.set('cl_password', jsonData.password);\r",
											"// pm.test(\"cluster password is saved\", function() {\r",
											"// pm.expect(jsonData.password).to.eql(pm.environment.get(\"cl_password\"));\r",
											"// });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v2/clusters/{{cluster_id}}/password/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"clusters",
										"{{cluster_id}}",
										"password",
										""
									]
								},
								"description": "Get cluster password."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v2/clusters/{{cluster_id}}/password/",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"clusters",
												"{{cluster_id}}",
												"password",
												""
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": {{$randomInt}},\n    // todo: узнать это имя кластера?\n    \"name\": \"{{$randomUserName}}\",\n    \"password\": \"{{$randomPassword}}\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "Cluster",
					"item": [
						{
							"name": "/api/v2/cluster/<int:cluster_id>/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// chack status\r",
											"pm.test(\"Response is OK\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//check format\r",
											"pm.test(\"Response is json format\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"//check success\r",
											"pm.test(\"Response is success\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v2/cluster/{{cluster_id}}/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"cluster",
										"{{cluster_id}}",
										""
									]
								},
								"description": "Get detailed info of cluster"
							},
							"response": [
								{
									"name": "/api/v2/cluster/<int:cluster_id>/",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v2/cluster/{{cluster_id}}/",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"cluster",
												"{{cluster_id}}",
												""
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"name\": \"ClusterName{{$randomAlphaNumeric}}\", \n    \"status\": {\n        \"state\": \"<string: task state>\", \n        \"operation\": \"<string: operation type, e.g. \\\"ADDING\\\">\", \n        \"task_id\": \"{{$randomUUID}}\"\n    }, \n    \"id\": \"{{$randomInt}}\", \n    \"nodes\": [\n        \"{{$randomUUID}}\"\n    ]\n}"
								}
							]
						},
						{
							"name": "/api/v2/cluster/<int:cluster_id>/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// chack status",
											"pm.test(\"Response is OK\", function () {",
											"    pm.response.to.be.ok;",
											"});",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"//check success",
											"pm.test(\"Response is success\", function () {",
											"    pm.response.to.be.success;",
											"});",
											"",
											"//check response",
											"pm.test(\"Response is empty\", ()=> {",
											"    pm.expect(pm.response.text).to.length(0);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest(\"{{url}}/api/v2/clusters/\", function (err, response) {",
											"    console.log(err);",
											"    console.log(response.text());",
											"});",
											"",
											"pm.environment.set(\"cluster_id\", \"{{$randomUUID}}\");"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v2/cluster/{{cluster_id}}/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"cluster",
										"{{cluster_id}}",
										""
									]
								},
								"description": "Удаление кластера из БД."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v2/cluster/{{cluster_id}}/",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"cluster",
												"{{cluster_id}}",
												""
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "Text",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": null
								}
							]
						}
					]
				},
				{
					"name": "License",
					"item": [
						{
							"name": "/api/v2/<int:cluster_id>/license/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// chack status\r",
											"pm.test(\"Response is OK\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//check success\r",
											"pm.test(\"Response is success\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											"\r",
											"//check format\r",
											"pm.test(\"Response is json format\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v2/{{cluster_id}}/license/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"{{cluster_id}}",
										"license",
										""
									]
								},
								"description": "Get cluster license."
							},
							"response": [
								{
									"name": "/api/v2/<int:cluster_id>/license/",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v2/{{cluster_id}}/license/",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"{{cluster_id}}",
												"license",
												""
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": null,
									"cookie": [],
									"body": "{\n    \"capacity\": {{$randomInt}},\n    \"expiration_ts\": {{$randomInt}},\n    \"free_size\": {{$randomInt}},\n    \"keynumber\": \"str\",\n    \"status\": \"str\",\n    \"total_size\": {{$randomInt}},\n    \"used_size\": {{$randomInt}}\n}"
								}
							]
						},
						{
							"name": "/api/v2/<int:cluster_id>/license/keys/update/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// chack status\r",
											"// pm.test(\"Response is OK\", function () {\r",
											"//     pm.response.to.be.ok;\r",
											"// });\r",
											"\r",
											"// pm.test(\"Status code is 200\", function () {\r",
											"//     pm.response.to.have.status(200);\r",
											"// });\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"\r",
											"//check success\r",
											"// pm.test(\"Response is success\", function () {\r",
											"//     pm.response.to.be.success;\r",
											"// });\r",
											"\r",
											"//check format\r",
											"pm.test(\"Response is json format\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"server\": \"str\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v2/{{cluster_id}}/license/keys/update/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"{{cluster_id}}",
										"license",
										"keys",
										"update",
										""
									]
								},
								"description": "Register cluster license"
							},
							"response": [
								{
									"name": "/api/v2/<int:cluster_id>/license/keys/update/",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v2/{{cluster_id}}/license/keys/update/",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"{{cluster_id}}",
												"license",
												"keys",
												"update",
												""
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": null,
									"cookie": [],
									"body": "{\n    \"capacity\": int,\n    \"expiration_ts\": int,\n    \"free_size\": int,\n    \"keynumber\": str,\n    \"status\": str,\n    \"total_size\": int,\n    \"used_size\": int\n}"
								}
							]
						},
						{
							"name": "/api/v2/<int:cluster_id>/license/keys/register/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// chack status\r",
											"pm.test(\"Response is OK\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//check success\r",
											"pm.test(\"Response is success\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											"\r",
											"//check format\r",
											"// pm.test(\"Response is json format\", function () {\r",
											"//     pm.response.to.be.json;\r",
											"// });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"key\": \"str\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v2/{{cluster_id}}/license/keys/register/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"{{cluster_id}}",
										"license",
										"keys",
										"register",
										""
									]
								},
								"description": "Register cluster license."
							},
							"response": [
								{
									"name": "/api/v2/<int:cluster_id>/license/keys/register/",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"key\": \"str\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v2/{{cluster_id}}/license/keys/register/",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"{{cluster_id}}",
												"license",
												"keys",
												"register",
												""
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": null,
									"cookie": [],
									"body": "{\n    \"capacity\": int,\n    \"expiration_ts\": int,\n    \"free_size\": int,\n    \"keynumber\": str,\n    \"status\": str,\n    \"total_size\": int,\n    \"used_size\": int\n}"
								}
							]
						},
						{
							"name": "/api/v2/<int:cluster_id>/license/as/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// chack status\r",
											"pm.test(\"Response is OK\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//check success\r",
											"pm.test(\"Response is success\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											"\r",
											"//check format\r",
											"// pm.test(\"Response is json format\", function () {\r",
											"//     pm.response.to.be.json;\r",
											"// });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v2/{{cluster_id}}/license/as/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"{{cluster_id}}",
										"license",
										"as",
										""
									]
								}
							},
							"response": [
								{
									"name": "/api/v2/<int:cluster_id>/license/as/",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v2/{{cluster_id}}/license/as/",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"{{cluster_id}}",
												"license",
												"as",
												""
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": null,
									"cookie": [],
									"body": "{\n    \"capacity\": int,\n    \"expiration\": datetime, // ISO UTC format\n}"
								}
							]
						},
						{
							"name": "/api/v2/<int:cluster_id>/license/as/test/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// chack status\r",
											"pm.test(\"Response is OK\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//check success\r",
											"pm.test(\"Response is success\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											"\r",
											"//check format\r",
											"// pm.test(\"Response is json format\", function () {\r",
											"//     pm.response.to.be.json;\r",
											"// });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v2/{{cluster_id}}/license/as/test/?key=str&type=prolong",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"{{cluster_id}}",
										"license",
										"as",
										"test",
										""
									],
									"query": [
										{
											"key": "key",
											"value": "str"
										},
										{
											"key": "type",
											"value": "prolong",
											"description": "prolong, upgrade"
										}
									]
								}
							},
							"response": [
								{
									"name": "/api/v2/<int:cluster_id>/license/as/test/",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v2/{{cluster_id}}/license/as/test/?params={\"keys\": [string, ...], \"type\": string enum of (prolong, upgrade)}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"{{cluster_id}}",
												"license",
												"as",
												"test",
												""
											],
											"query": [
												{
													"key": "params",
													"value": "{\"keys\": [string, ...], \"type\": string enum of (prolong, upgrade)}"
												}
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": null,
									"cookie": [],
									"body": "{\n    \"capacity\": int,\n    \"expiration\": datetime, // ISO UTC format\n}"
								}
							]
						}
					]
				},
				{
					"name": "Events",
					"item": [
						{
							"name": "/api/v2/<int:cluster_id>/events/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// chack status\r",
											"pm.test(\"Response is OK\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//check success\r",
											"pm.test(\"Response is success\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											"\r",
											"//check format\r",
											"// pm.test(\"Response is json format\", function () {\r",
											"//     pm.response.to.be.json;\r",
											"// });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v2/{{cluster_id}}/events/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"{{cluster_id}}",
										"events",
										""
									]
								},
								"description": "Get verbose info about events in cluster"
							},
							"response": [
								{
									"name": "/api/v2/<int:cluster_id>/events/",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v2/{{cluster_id}}/events/",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"{{cluster_id}}",
												"events",
												""
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": null,
									"cookie": [],
									"body": "[\n   {\n      \"id\": int,\n      \"datetime\": \"YYYY-mm-ddTHH:MM:SS.ffffff\",\n      \"sys\": str(3),\n      \"sev\": str(3),\n      \"message\": str,\n      \"cluster_id\": int\n   },\n   ...\n]"
								}
							]
						},
						{
							"name": "/api/v2/<int:cluster_id>/events/ Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// chack status\r",
											"pm.test(\"Response is OK\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//check success\r",
											"pm.test(\"Response is success\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											"\r",
											"//check format\r",
											"// pm.test(\"Response is json format\", function () {\r",
											"//     pm.response.to.be.json;\r",
											"// });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v2/{{cluster_id}}/events/?params={\"fields\": [\"name1\", \"name2\", ..., \"nameN\"], \"lastn\": int, \"page\": int, \"limit\": int, \"filters\": {\"beg\": \"YYYY-mm-ddTHH:MM:SS.ffffff\", \"end\": \"YYYY-mm-ddTHH:MM:SS.ffffff\", \"sys\": [\"sys1\",\"sys2\",...,\"sysN\"],\"sev\": [\"sev1\",\"sev2\",...,\"sevN\"], \"submsg\": str}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"{{cluster_id}}",
										"events",
										""
									],
									"query": [
										{
											"key": "params",
											"value": "{\"fields\": [\"name1\", \"name2\", ..., \"nameN\"], \"lastn\": int, \"page\": int, \"limit\": int, \"filters\": {\"beg\": \"YYYY-mm-ddTHH:MM:SS.ffffff\", \"end\": \"YYYY-mm-ddTHH:MM:SS.ffffff\", \"sys\": [\"sys1\",\"sys2\",...,\"sysN\"],\"sev\": [\"sev1\",\"sev2\",...,\"sevN\"], \"submsg\": str}}",
											"description": "1. fields -- Field names to output [json list] (default: all)\n2. page -- Page index [1..N] (defaault: 1)\n3. limit -- Events per page [1..N] (default: 20)\n4. lastn -- Last N events [1..N] (default: all)\n5. beg -- Begin date inclusive [ISO8601 format: \"YYYY-mm-ddTHH:MM:SS.ffffff\"] (default: min date)\n6. end -- End date exclusive [ISO8601 format: \"YYYY-mm-ddTHH:MM:SS.ffffff\"] (default: max date)\n7. sys -- List of subsystems or string [JRN,MDS,CS,FUS,CLN,MON,TLS,TST,ADM,???] (default: all)\n8. sev -- List of severities or string [ERR,INF,WRN,DBG,???] (default: all)\n9. submsg -- Submessage (some text) (default: empty string)"
										}
									]
								},
								"description": "Get verbose info about events in cluster"
							},
							"response": [
								{
									"name": "/api/v2/<int:cluster_id>/events/ Copy",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v2/{{cluster_id}}/events/?params={\"fields\": [\"name1\", \"name2\", ..., \"nameN\"], \"lastn\": int, \"page\": int, \"limit\": int, \"filters\": {\"beg\": \"YYYY-mm-ddTHH:MM:SS.ffffff\", \"end\": \"YYYY-mm-ddTHH:MM:SS.ffffff\", \"sys\": [\"sys1\",\"sys2\",...,\"sysN\"],\"sev\": [\"sev1\",\"sev2\",...,\"sevN\"], \"submsg\": str}}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"{{cluster_id}}",
												"events",
												""
											],
											"query": [
												{
													"key": "params",
													"value": "{\"fields\": [\"name1\", \"name2\", ..., \"nameN\"], \"lastn\": int, \"page\": int, \"limit\": int, \"filters\": {\"beg\": \"YYYY-mm-ddTHH:MM:SS.ffffff\", \"end\": \"YYYY-mm-ddTHH:MM:SS.ffffff\", \"sys\": [\"sys1\",\"sys2\",...,\"sysN\"],\"sev\": [\"sev1\",\"sev2\",...,\"sevN\"], \"submsg\": str}}",
													"description": "1. fields -- Field names to output [json list] (default: all)\n2. page -- Page index [1..N] (defaault: 1)\n3. limit -- Events per page [1..N] (default: 20)\n4. lastn -- Last N events [1..N] (default: all)\n5. beg -- Begin date inclusive [ISO8601 format: \"YYYY-mm-ddTHH:MM:SS.ffffff\"] (default: min date)\n6. end -- End date exclusive [ISO8601 format: \"YYYY-mm-ddTHH:MM:SS.ffffff\"] (default: max date)\n7. sys -- List of subsystems or string [JRN,MDS,CS,FUS,CLN,MON,TLS,TST,ADM,???] (default: all)\n8. sev -- List of severities or string [ERR,INF,WRN,DBG,???] (default: all)\n9. submsg -- Submessage (some text) (default: empty string)"
												}
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": null,
									"cookie": [],
									"body": "[\n   {\n      \"id\": int,\n      \"datetime\": \"YYYY-mm-ddTHH:MM:SS.ffffff\",\n      \"sys\": str(3),\n      \"sev\": str(3),\n      \"message\": str,\n      \"cluster_id\": int\n   },\n   ...\n]"
								}
							]
						}
					],
					"description": "Get verbose info about events in cluster.\n\n**Args**\n\n- params - json\n\n_where json is:_\n\n```json\n{\n    \"fields\": [\n        \"name1\",\n        \"name2\",\n        ...,\n        \"nameN\"\n    ],\n    \"lastn\": int,\n    \"page\": int,\n    \"limit\": int,\n    \"filters\": {\n        \"beg\": \"YYYY-mm-ddTHH:MM:SS.ffffff\",\n        \"end\": \"YYYY-mm-ddTHH:MM:SS.ffffff\",\n        \"sys\": [\"sys1\",\"sys2\",...,\"sysN\"],\n        \"sev\": [\"sev1\",\"sev2\",...,\"sevN\"],\n        \"submsg\": str\n    }\n}\n```\n\n1. fields -- Field names to output [json list] (default: all)\n2. page -- Page index [1..N] (defaault: 1)\n3. limit -- Events per page [1..N] (default: 20)\n4. lastn -- Last N events [1..N] (default: all)\n5. beg -- Begin date inclusive [ISO8601 format: \"YYYY-mm-ddTHH:MM:SS.ffffff\"] (default: min date)\n6. end -- End date exclusive [ISO8601 format: \"YYYY-mm-ddTHH:MM:SS.ffffff\"] (default: max date)\n7. sys -- List of subsystems or string [JRN,MDS,CS,FUS,CLN,MON,TLS,TST,ADM,???] (default: all)\n8. sev -- List of severities or string [ERR,INF,WRN,DBG,???] (default: all)\n9. submsg -- Submessage (some text) (default: empty string)"
				},
				{
					"name": "Chunk Servers",
					"item": [
						{
							"name": "/api/v2/<int:cluster_id>/css/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// chack status\r",
											"pm.test(\"Response is OK\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//check success\r",
											"pm.test(\"Response is success\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											"\r",
											"//check format\r",
											"// pm.test(\"Response is json format\", function () {\r",
											"//     pm.response.to.be.json;\r",
											"// });\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v2/{{cluster_id}}/css/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"{{cluster_id}}",
										"css",
										""
									]
								},
								"description": "Provides info about all css servers in cluster\n\nParams: optional query parameters: \\`params={\"fields\":\\[\"id\",\"status\",\"host_info\",\"space\"\\]}\\`. If provided, request return only listed fields for each cs."
							},
							"response": [
								{
									"name": "/api/v2/<int:cluster_id>/css/",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v2/{{cluster_id}}/css/",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"{{cluster_id}}",
												"css",
												""
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": null,
									"cookie": [],
									"body": "{\n    \"data\": [\n        {\n            \"rmw\": <int>, \n            \"tier\": <int>, \n            \"path\": <string>, \n            \"jrmw\": <int>, \n            \"net_stat\": {\n                \"retrans\": <int>, \n                \"lat_avg\": <int>, \n                \"lat_max\": <int>, \n                \"lat_top\": <int>\n            }, \n            \"io_stat\": {\n                \"sync\": <int>, \n                \"iowait\": <float>, \n                \"read_ops\": <int>, \n                \"write_ops\": <int>,\n                \"reads\": <int>, \n                \"writes\": <int>, \n                \"datasync\": <int>, \n                \"ioqueue\": <float>, \n                \"jfull\": <float>\n            }, \n            \"device\": <string>, \n            \"status\": <string>, \n            \"alloc_cost\": <int>, \n            \"id\": <int>, \n            \"latency\": <int>,\n            \"host_info\": {\n                \"host\": <string>, \n                \"id\": <string>\n            }, \n            \"chunks\": {\n                \"deleting\": <int>, \n                \"degraded\": <int>, \n                \"healthy\": <int>, \n                \"replicating\": <int>, \n                \"blocked\": <int>, \n                \"overcommitted\": <int>, \n                \"offline\": <int>, \n                \"urgent\": <int>,\n                \"total\": <int>, \n                \"void\": <int>\n            }, \n            \"journal\": {\n                \"device\": <string>, \n                \"path\": <string>, \n                \"size\": <int>\n            }, \n            \"space\": {\n                \"avail\": <int>, \n                \"total\": <int>\n            }\n        }, \n    ]\n}"
								}
							]
						},
						{
							"name": "/api/v2/<int:cluster_id>/css/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// chack status\r",
											"pm.test(\"Response is OK\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//check success\r",
											"pm.test(\"Response is success\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											"\r",
											"//check format\r",
											"// pm.test(\"Response is json format\", function () {\r",
											"//     pm.response.to.be.json;\r",
											"// });\r",
											"\r",
											"\r",
											"//save task_id\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set(\"task_id\", jsonData.task_id);\r",
											"pm.test(\"task_id is saved\", function() {\r",
											"pm.expect(jsonData.task_id).to.eql(pm.environment.get('task_id'));\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"node_id\": <string>,\n    \"path\": <string>,\n    \"journal_path\" : <string>\n    \"journal_data_size\": <string>,\n    \"journal_metadata_size\": <string>\n}"
								},
								"url": {
									"raw": "{{url}}/api/v2/{{cluster_id}}/css/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"{{cluster_id}}",
										"css",
										""
									]
								},
								"description": "Start task which create new cs.\n\n**Content**\n\n  \n\\`journal_*\\` params is optional. If \\`journal_path\\` provided, cs will be created with journal located on given path. If \\`journal_data_size\\` and \\`journal_metadata_size\\` provided, journal size for data and metadata will be set. If \\`journal_metadata_size\\` is provided, \\`journal_data_size\\` must be provided too."
							},
							"response": [
								{
									"name": "/api/v2/<int:cluster_id>/css/",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"node_id\": <string>,\n    \"path\": <string>,\n    \"journal_path\" : <string>\n    \"journal_data_size\": <string>,\n    \"journal_metadata_size\": <string>\n}"
										},
										"url": {
											"raw": "{{url}}/api/v2/{{cluster_id}}/css/",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"{{cluster_id}}",
												"css",
												""
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": null,
									"cookie": [],
									"body": "{\n    \"task_id\": \"{{$randomUUID}}\"\n}"
								}
							]
						},
						{
							"name": "/api/v2/<int:cluster_id>/css/<int:cs_id>/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// chack status\r",
											"pm.test(\"Response is OK\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//check success\r",
											"pm.test(\"Response is success\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v2/{{cluster_id}}/css/{{cs_id}}/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"{{cluster_id}}",
										"css",
										"{{cs_id}}",
										""
									]
								},
								"description": "Provides info single cs server  \n\nParams: optional query parameters: \\`params={\"fields\":\\[\"id\",\"status\",\"host_info\",\"space\"\\]}\\`. If provided, request return only listed fields for each cs."
							},
							"response": [
								{
									"name": "/api/v2/<int:cluster_id>/css/<int:cs_id>/",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v2/{{cluster_id}}/css/{{cs_id}}/",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"{{cluster_id}}",
												"css",
												"{{cs_id}}",
												""
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": null,
									"cookie": [],
									"body": null
								}
							]
						},
						{
							"name": "/api/v2/<int:cluster_id>/css/<int:cs_id>/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// chack status\r",
											"pm.test(\"Response is OK\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//check success\r",
											"pm.test(\"Response is success\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											"\r",
											"//check response\r",
											"pm.test(\"Response is empty\", ()=> {\r",
											"    pm.expect(pm.response.text).to.length(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v2/{{cluster_id}}/css/{{cs_id}}/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"{{cluster_id}}",
										"css",
										"{{cs_id}}",
										""
									]
								},
								"description": "Remove cs"
							},
							"response": [
								{
									"name": "/api/v2/<int:cluster_id>/css/<int:cs_id>/",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v2/{{cluster_id}}/css/{{cs_id}}/",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"{{cluster_id}}",
												"css",
												"{{cs_id}}",
												""
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "Text",
									"header": null,
									"cookie": [],
									"body": null
								}
							]
						}
					],
					"description": "Chunk servers info and manipulations.\n\nProvides 2 endpoints: `css` and `cs`."
				}
			],
			"description": "# Cluster info and manipulations endpoint\n\nProvides 2 endpoints: `clusters` and `cluster`"
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Users",
					"item": [
						{
							"name": "/api/v2/users/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// chack status\r",
											"pm.test(\"Response is OK\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//check success\r",
											"pm.test(\"Response is success\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											"\r",
											"\r",
											"//check format\r",
											"pm.test(\"Response is json format\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v2/users/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"users",
										""
									]
								},
								"description": "Provides info all about users."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": ""
										}
									},
									"_postman_previewlanguage": "json",
									"header": null,
									"cookie": [],
									"body": "{\n    \"data\": [\n        {\n             \"id\": \"<int: user id>\",\n             \"username\": \"<string: username>\",\n             \"description\": \"<string: description>\",\n             \"is_superuser\": \"<boolean>\",\n             \"is_enabled\": \"<boolean>\"\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "/api/v2/users/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// chack status\r",
											"pm.test(\"Response is OK\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//check success\r",
											"pm.test(\"Response is success\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											"\r",
											"\r",
											"//check format\r",
											"pm.test(\"Response is json format\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\": \"<string: username>\",\n    \"password\": \"<string: password>\",\n    \"description\": \"<string: description>\",\n    \"is_enabled\": \"<boolean>\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v2/users/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"users",
										""
									]
								},
								"description": "Create a user.\n\nOnly the superuser is allowed.\n\n**Request body Description**\n\n- `description`, `is_enabled`, `can_adit` is optional.\n- `is_enabled` - Default: false"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n     \"username\": \"<string: username>\",\n     \"password\": \"<string: password>\",\n     \"description\": \"<string: description>\",\n     \"is_enabled\": \"<boolean>\" // Default: false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "/api/v2/users/",
											"path": [
												"api",
												"v2",
												"users",
												""
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": null,
									"cookie": [],
									"body": "{\n    \"id\": \"<int: user id>\",\n    \"username\": \"<string: username>\",\n    \"description\": \"<string: description>\",\n    \"is_superuser\": \"<boolean>\",\n    \"is_enabled\": \"<boolean>\"\n}"
								},
								{
									"name": "BAD REQUEST",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n     \"username\": \"<string: username>\",\n     \"password\": \"<string: password>\",\n     \"description\": \"<string: description>\",\n     \"is_enabled\": \"<boolean>\" // Default: false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "/api/v2/users/",
											"path": [
												"api",
												"v2",
												"users",
												""
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": null,
									"cookie": [],
									"body": ""
								},
								{
									"name": "UNAUTHORIZED",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n     \"username\": \"<string: username>\",\n     \"password\": \"<string: password>\",\n     \"description\": \"<string: description>\",\n     \"is_enabled\": \"<boolean>\" // Default: false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "/api/v2/users/",
											"path": [
												"api",
												"v2",
												"users",
												""
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "json",
									"header": null,
									"cookie": [],
									"body": ""
								},
								{
									"name": "FORBIDDEN",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n     \"username\": \"<string: username>\",\n     \"password\": \"<string: password>\",\n     \"description\": \"<string: description>\",\n     \"is_enabled\": \"<boolean>\" // Default: false\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "/api/v2/users/",
											"path": [
												"api",
												"v2",
												"users",
												""
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": null,
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "User",
					"item": [
						{
							"name": "/api/v2/user/<int:user_id>/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// chack status\r",
											"pm.test(\"Response is OK\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//check success\r",
											"pm.test(\"Response is success\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											"\r",
											"\r",
											"//check format\r",
											"pm.test(\"Response is json format\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v2/user/{{user_id}}/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"user",
										"{{user_id}}",
										""
									]
								},
								"description": "Provides info about a user"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v2/user/{{user_id}}/",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"user",
												"{{user_id}}",
												""
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": null,
									"cookie": [],
									"body": "{\n    \"id\": \"<int: user id>\",\n    \"username\": \"<string: username>\",\n    \"description\": \"<string: description>\",\n    \"is_superuser\": \"<boolean>\",\n    \"is_enabled\": \"<boolean>\"\n}"
								}
							]
						},
						{
							"name": "/api/v2/user/<int:user_id>/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// // chack status\r",
											"// pm.test(\"Response is OK\", function () {\r",
											"//     pm.response.to.be.ok;\r",
											"// });\r",
											"\r",
											"// pm.test(\"Status code is 200\", function () {\r",
											"//     pm.response.to.have.status(200);\r",
											"// });\r",
											"\r",
											"// //check success\r",
											"// pm.test(\"Response is success\", function () {\r",
											"//     pm.response.to.be.success;\r",
											"// });\r",
											"\r",
											"\r",
											"//check format\r",
											"pm.test(\"Response is json format\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 404\", function() {\r",
											"    pm.response.to.have.status(404)\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\":\"<string: username>\",\n    \"password\":\"<string: password>\",\n    \"description\":\"<string: description>\",\n    \"is_enabled\":\"<boolean>\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v2/user/{{user_id}}/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"user",
										"{{user_id}}",
										""
									]
								},
								"description": "Modify a user.\n\nThe superuser is allowed to modify all fields, except `is_superuser`.\n\nAll fields is optional.\n\n\nAnother users is allowed to modify yours own password only \n\n```JSON\n{\n     \"current_password\": \"<string: current password>\",\n     \"new_password\": \"<string: new password>\",\n}\n```"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"<string: username>\",\n    \"password\": \"<string: password>\",\n    \"description\": \"<string: description>\",\n    \"is_enabled\": \"<boolean>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v2/user/<int:user_id>/",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"user",
												"<int:user_id>",
												""
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": null,
									"cookie": [],
									"body": "{\n    \"id\": \"<int: user id>\",\n    \"username\": \"<string: username>\",\n    \"description\": \"<string: description>\",\n    \"is_superuser\": \"<boolean>\",\n    \"is_enabled\": \"<boolean>\"\n}"
								},
								{
									"name": "BAD_REQUEST",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"<string: username>\",\n    \"password\": \"<string: password>\",\n    \"description\": \"<string: description>\",\n    \"is_enabled\": \"<boolean>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v2/user/<int:user_id>/",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"user",
												"<int:user_id>",
												""
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": null,
									"cookie": [],
									"body": ""
								},
								{
									"name": "UNAUTHORIZED",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"<string: username>\",\n    \"password\": \"<string: password>\",\n    \"description\": \"<string: description>\",\n    \"is_enabled\": \"<boolean>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v2/user/<int:user_id>/",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"user",
												"<int:user_id>",
												""
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": null,
									"cookie": [],
									"body": ""
								},
								{
									"name": "FORBIDDEN",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"<string: username>\",\n    \"password\": \"<string: password>\",\n    \"description\": \"<string: description>\",\n    \"is_enabled\": \"<boolean>\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v2/user/<int:user_id>/",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"user",
												"<int:user_id>",
												""
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": null,
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "/api/v2/user/<int:user_id>/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// chack status\r",
											"pm.test(\"Response is OK\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//check success\r",
											"pm.test(\"Response is success\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											"\r",
											"\r",
											"//check format\r",
											"// pm.test(\"Response is json format\", function () {\r",
											"//     pm.response.to.be.json;\r",
											"// });\r",
											"\r",
											"\r",
											"//check response\r",
											"pm.test(\"Response is empty\", ()=> {\r",
											"    pm.expect(pm.response.text).to.length(0);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v2/user/{{user_id}}/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"user",
										"{{user_id}}",
										""
									]
								},
								"description": "Delete a user."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v2/user/{{user_id}}/",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"user",
												"{{user_id}}",
												""
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "Text",
									"header": null,
									"cookie": [],
									"body": null
								}
							]
						}
					],
					"description": "User"
				}
			],
			"description": "# User info and manipulations endpoint\n\nIf `app.config['LOGIN_DISABLED'] = False` then non-authenticated user act as superuser!"
		},
		{
			"name": "Tasks",
			"item": [
				{
					"name": "/api/v2/tasks/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// chack status\r",
									"pm.test(\"Response is OK\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//check success\r",
									"pm.test(\"Response is success\", function () {\r",
									"    pm.response.to.be.success;\r",
									"});\r",
									"\r",
									"\r",
									"//check format\r",
									"// pm.test(\"Response is json format\", function () {\r",
									"//     pm.response.to.be.json;\r",
									"// });\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v2/tasks/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"tasks",
								""
							]
						},
						"description": "Get list of all tasks on backend server."
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "/api/v2/tasks/",
									"path": [
										"api",
										"v2",
										"tasks",
										""
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "[\n    {\n        \"state\": <str>, # one of (\"SCHEDULED\",\"RUNNING\",\"SUCCESS\",\"FAILED\",\"CANCELLING\",\"CANCELLED\",\"STARTING\"), MANDATORY\n        \"task_id\": <str>, # UUID, MANDATORY\n        \"result\": <any serializable type>,\n        \"error\": <str>,\n        \"args\": [<any serializable type>],\n        \"kwargs\": <dict>\n    }\n]"
						}
					]
				},
				{
					"name": "/api/v2/tasks/<string:task_id>/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// chack status\r",
									"pm.test(\"Response is OK\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//check success\r",
									"pm.test(\"Response is success\", function () {\r",
									"    pm.response.to.be.success;\r",
									"});\r",
									"\r",
									"\r",
									"//check format\r",
									"// pm.test(\"Response is json format\", function () {\r",
									"//     pm.response.to.be.json;\r",
									"// });\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v2/tasks/{{task_id}}/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"tasks",
								"{{task_id}}",
								""
							]
						},
						"description": "Get task description on backend server"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v2/tasks/{{task_id}}/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"tasks",
										"{{task_id}}",
										""
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "{\n    \"state\": <str>, # one of (\"SCHEDULED\",\"RUNNING\",\"SUCCESS\",\"FAILED\",\"CANCELLING\",\"CANCELLED\",\"STARTING\"), MANDATORY\n    \"task_id\": <str>, # UUID, MANDATORY\n    \"result\": <any serializable type>,\n    \"error\": <str>,\n    \"args\": [<any serializable type>],\n    \"kwargs\": <dict>\n}"
						}
					]
				}
			],
			"description": "# Info about tasks\n\nProvides 2 endpoints: `tasks_list` and  `task_detail`.\n\n**Note:**\n\nMisc endpoints should returns the next \"task\" object if it will be used as pseudo object on UI \n\n```json\n{\n    \"task\": {\n        \"state\": \"<string: task state>\", \n        \"operation\": \"<string: operation type, e.g. \"ADDING\">\", \n        \"task_id\": \"<string: task id>\"\n    }\n}\n```\n\nOtherwise returns\n\n```json\n{\n    \"task_id\": \"<string: task id>\"\n}\n```\n\nAnd returns HTTP code 4xx or 5xx on error"
		},
		{
			"name": "Stats",
			"item": [
				{
					"name": "Get cluster statistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// // chack status\r",
									"// pm.test(\"Response is OK\", function () {\r",
									"//     pm.response.to.be.ok;\r",
									"// });\r",
									"\r",
									"// pm.test(\"Status code is 200\", function () {\r",
									"//     pm.response.to.have.status(200);\r",
									"// });\r",
									"\r",
									"// //check success\r",
									"// pm.test(\"Response is success\", function () {\r",
									"//     pm.response.to.be.success;\r",
									"// });\r",
									"\r",
									"\r",
									"////check format\r",
									"pm.test(\"Response is json format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v2/{{cid}}/stat/?params={\"types\": list, \"filters\": {\"from\": \"YYYY-mm-ddTHH:MM:SS.ffffff\", \"to\": \"YYYY-mm-ddTHH:MM:SS.ffffff\"}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"{{cid}}",
								"stat",
								""
							],
							"query": [
								{
									"key": "params",
									"value": "{\"types\": list, \"filters\": {\"from\": \"YYYY-mm-ddTHH:MM:SS.ffffff\", \"to\": \"YYYY-mm-ddTHH:MM:SS.ffffff\"}}",
									"description": "`type` - include some of values `io_reads`, `io_writes`, `io_read_ops`, `io_write_ops`, `io_repl_reads`, `io_repl_writes`, `io_sync`, `io_datasync`, `cs_total`, `cs_active`, `mds_total`, `mds_avail`"
								}
							]
						},
						"description": "Get cluster statistics."
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v2/<int:cluster_id>/stat/?params={\"types\": list, \"filters\": {\"from\": \"YYYY-mm-ddTHH:MM:SS.ffffff\", \"to\": \"YYYY-mm-ddTHH:MM:SS.ffffff\"}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"<int:cluster_id>",
										"stat",
										""
									],
									"query": [
										{
											"key": "params",
											"value": "{\"types\": list, \"filters\": {\"from\": \"YYYY-mm-ddTHH:MM:SS.ffffff\", \"to\": \"YYYY-mm-ddTHH:MM:SS.ffffff\"}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "{\n    \"data\": [\n        [\n            \"YYYY-mm-ddTHH:MM:SS.ffffff\",\n            value1,\n            value2,\n            ...\n            valueN\n        ],\n        ...\n    ]\n}"
						}
					]
				},
				{
					"name": "Get CS statistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// // chack status\r",
									"// pm.test(\"Response is OK\", function () {\r",
									"//     pm.response.to.be.ok;\r",
									"// });\r",
									"\r",
									"// pm.test(\"Status code is 200\", function () {\r",
									"//     pm.response.to.have.status(200);\r",
									"// });\r",
									"\r",
									"// //check success\r",
									"// pm.test(\"Response is success\", function () {\r",
									"//     pm.response.to.be.success;\r",
									"// });\r",
									"\r",
									"\r",
									"////check format\r",
									"pm.test(\"Response is json format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v2/{{cluster_id}}/stat/cs/{{cid}}/?params={\"types\": list, \"filters\": {\"from\": \"YYYY-mm-ddTHH:MM:SS.ffffff\", \"to\": \"YYYY-mm-ddTHH:MM:SS.ffffff\"}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"{{cluster_id}}",
								"stat",
								"cs",
								"{{cid}}",
								""
							],
							"query": [
								{
									"key": "params",
									"value": "{\"types\": list, \"filters\": {\"from\": \"YYYY-mm-ddTHH:MM:SS.ffffff\", \"to\": \"YYYY-mm-ddTHH:MM:SS.ffffff\"}}"
								}
							]
						},
						"description": "Get CS statistics."
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v2/<int:cluster_id>/stat/cs/<int:cid>/?params={\"types\": list, \"filters\": {\"from\": \"YYYY-mm-ddTHH:MM:SS.ffffff\", \"to\": \"YYYY-mm-ddTHH:MM:SS.ffffff\"}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"<int:cluster_id>",
										"stat",
										"cs",
										"<int:cid>",
										""
									],
									"query": [
										{
											"key": "params",
											"value": "{\"types\": list, \"filters\": {\"from\": \"YYYY-mm-ddTHH:MM:SS.ffffff\", \"to\": \"YYYY-mm-ddTHH:MM:SS.ffffff\"}}",
											"description": "`type` - include some of values `io_reads`, `io_writes`, `io_read_ops`, `io_write_ops`, `io_repl_reads`, `io_repl_writes`, `io_sync`, `io_datasync`, `io_iowait`, `io_ioqueue`, `net_retrans`, `net_lat_avg`, `net_lat_max`, `net_lat_top`, `alloc_cost`, `latency`"
										}
									]
								}
							},
							"_postman_previewlanguage": "Text",
							"header": null,
							"cookie": [],
							"body": "{\n    \"data\": [\n        [\n            \"YYYY-mm-ddTHH:MM:SS.ffffff\",\n            value1,\n            value2,\n            ...\n            valueN\n        ],\n        ...\n    ]\n}"
						}
					]
				},
				{
					"name": "Get MDS statistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// chack status\r",
									"pm.test(\"Response is OK\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//check success\r",
									"pm.test(\"Response is success\", function () {\r",
									"    pm.response.to.be.success;\r",
									"});\r",
									"\r",
									"\r",
									"//check format\r",
									"// pm.test(\"Response is json format\", function () {\r",
									"//     pm.response.to.be.json;\r",
									"// });\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v2/{{cluster_id}}/stat/mds/{{cid}}/?params={\"types\": list, \"filters\": {\"from\": \"YYYY-mm-ddTHH:MM:SS.ffffff\", \"to\": \"YYYY-mm-ddTHH:MM:SS.ffffff\"}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"{{cluster_id}}",
								"stat",
								"mds",
								"{{cid}}",
								""
							],
							"query": [
								{
									"key": "params",
									"value": "{\"types\": list, \"filters\": {\"from\": \"YYYY-mm-ddTHH:MM:SS.ffffff\", \"to\": \"YYYY-mm-ddTHH:MM:SS.ffffff\"}}",
									"description": "`type` - include some of values `ctime`, `cpu_usage`, `mem_usage`, `uptime`"
								}
							]
						},
						"description": "Get MDS statistics."
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v2/{{cluster_id}}/stat/mds/{{cid}}/?params={\"types\": list, \"filters\": {\"from\": \"YYYY-mm-ddTHH:MM:SS.ffffff\", \"to\": \"YYYY-mm-ddTHH:MM:SS.ffffff\"}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"{{cluster_id}}",
										"stat",
										"mds",
										"{{cid}}",
										""
									],
									"query": [
										{
											"key": "params",
											"value": "{\"types\": list, \"filters\": {\"from\": \"YYYY-mm-ddTHH:MM:SS.ffffff\", \"to\": \"YYYY-mm-ddTHH:MM:SS.ffffff\"}}",
											"description": "`type` - include some of values `ctime`, `cpu_usage`, `mem_usage`, `uptime`"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": null,
							"cookie": [],
							"body": "{\n    \"data\": [\n        [\n            \"YYYY-mm-ddTHH:MM:SS.ffffff\",\n            value1,\n            value2,\n            ...\n            valueN\n        ],\n        ...\n    ]\n}"
						}
					]
				},
				{
					"name": "Get node statistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// // chack status\r",
									"// pm.test(\"Response is OK\", function () {\r",
									"//     pm.response.to.be.ok;\r",
									"// });\r",
									"\r",
									"// pm.test(\"Status code is 200\", function () {\r",
									"//     pm.response.to.have.status(200);\r",
									"// });\r",
									"\r",
									"// //check success\r",
									"// pm.test(\"Response is success\", function () {\r",
									"//     pm.response.to.be.success;\r",
									"// });\r",
									"\r",
									"\r",
									"// //check format\r",
									"pm.test(\"Response is json format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v2/stat/nodes/{{node_id}}/?params={\"types\": [list], \"filters\": {\"from\": \"YYYY-mm-ddTHH:MM:SS.ffffff\", \"to\": \"YYYY-mm-ddTHH:MM:SS.ffffff\"}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"stat",
								"nodes",
								"{{node_id}}",
								""
							],
							"query": [
								{
									"key": "params",
									"value": "{\"types\": [list], \"filters\": {\"from\": \"YYYY-mm-ddTHH:MM:SS.ffffff\", \"to\": \"YYYY-mm-ddTHH:MM:SS.ffffff\"}}",
									"description": "`type` - include some of values `cpu_idle', `cpu_cores', `mem_free', `mem_total', `dsk_reads', `dsk_read_ops', `dsk_writes', `dsk_write_ops', `net_tx'"
								}
							]
						},
						"description": "Get node statistics.\n\n**Args**\n\n- `params` - json-type value"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "/api/v2/stat/nodes/<string:node_id>/?params={\"types\": list, \"filters\": {\"from\": \"YYYY-mm-ddTHH:MM:SS.ffffff\", \"to\": \"YYYY-mm-ddTHH:MM:SS.ffffff\"}}",
									"path": [
										"api",
										"v2",
										"stat",
										"nodes",
										"<string:node_id>",
										""
									],
									"query": [
										{
											"key": "params",
											"value": "{\"types\": list, \"filters\": {\"from\": \"YYYY-mm-ddTHH:MM:SS.ffffff\", \"to\": \"YYYY-mm-ddTHH:MM:SS.ffffff\"}}",
											"description": "`type` - include some of values `cpu_idle', `cpu_cores', `mem_free', `mem_total', `dsk_reads', `dsk_read_ops', `dsk_writes', `dsk_write_ops', `net_tx'"
										}
									]
								}
							},
							"_postman_previewlanguage": "Text",
							"header": null,
							"cookie": [],
							"body": "{\n    \"data\": [\n        [\n            \"YYYY-mm-ddTHH:MM:SS.ffffff\",\n            value1,\n            value2,\n            ...\n            valueN\n        ],\n        ...\n    ]\n}"
						}
					]
				},
				{
					"name": "Get disk statistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// chack status\r",
									"pm.test(\"Response is OK\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//check success\r",
									"pm.test(\"Response is success\", function () {\r",
									"    pm.response.to.be.success;\r",
									"});\r",
									"\r",
									"\r",
									"// //check format\r",
									"// pm.test(\"Response is json format\", function () {\r",
									"//     pm.response.to.be.json;\r",
									"// });\r",
									"\r",
									"// pm.test(\"Status code is 404\", function () {\r",
									"//     pm.response.to.have.status(404);\r",
									"// });\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v2/stat/nodes/{{node_id}}/disks/{{disk_id}}/?params={\"types\": list, \"filters\": {\"from\": \"YYYY-mm-ddTHH:MM:SS.ffffff\", \"to\": \"YYYY-mm-ddTHH:MM:SS.ffffff\"}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"stat",
								"nodes",
								"{{node_id}}",
								"disks",
								"{{disk_id}}",
								""
							],
							"query": [
								{
									"key": "params",
									"value": "{\"types\": list, \"filters\": {\"from\": \"YYYY-mm-ddTHH:MM:SS.ffffff\", \"to\": \"YYYY-mm-ddTHH:MM:SS.ffffff\"}}"
								}
							]
						},
						"description": "Get disk statistics.\n\n**Args**\n\n`type` - include some of values `reads`, `read_ops`, `writes`, `write_ops`"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v2/stat/nodes/{{node_id}}/disks/{{disk_id}}/?params={\"types\": list, \"filters\": {\"from\": \"YYYY-mm-ddTHH:MM:SS.ffffff\", \"to\": \"YYYY-mm-ddTHH:MM:SS.ffffff\"}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"stat",
										"nodes",
										"{{node_id}}",
										"disks",
										"{{disk_id}}",
										""
									],
									"query": [
										{
											"key": "params",
											"value": "{\"types\": list, \"filters\": {\"from\": \"YYYY-mm-ddTHH:MM:SS.ffffff\", \"to\": \"YYYY-mm-ddTHH:MM:SS.ffffff\"}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": null,
							"cookie": [],
							"body": "{\n    \"data\": [\n        [\n            \"YYYY-mm-ddTHH:MM:SS.ffffff\",\n            value1,\n            value2,\n            ...\n            valueN\n        ],\n        ...\n    ]\n}"
						}
					]
				},
				{
					"name": "Get network statistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// chack status\r",
									"pm.test(\"Response is OK\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//check success\r",
									"pm.test(\"Response is success\", function () {\r",
									"    pm.response.to.be.success;\r",
									"});\r",
									"\r",
									"\r",
									"// //check format\r",
									"// pm.test(\"Response is json format\", function () {\r",
									"//     pm.response.to.be.json;\r",
									"// });\r",
									"\r",
									"// pm.test(\"Status code is 404\", function () {\r",
									"//     pm.response.to.have.status(404);\r",
									"// });\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v2/stat/nodes/{{node_id}}/network/{{ifname}}/?params={\"types\": list, \"filters\": {\"from\": \"YYYY-mm-ddTHH:MM:SS.ffffff\", \"to\": \"YYYY-mm-ddTHH:MM:SS.ffffff\"}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"stat",
								"nodes",
								"{{node_id}}",
								"network",
								"{{ifname}}",
								""
							],
							"query": [
								{
									"key": "params",
									"value": "{\"types\": list, \"filters\": {\"from\": \"YYYY-mm-ddTHH:MM:SS.ffffff\", \"to\": \"YYYY-mm-ddTHH:MM:SS.ffffff\"}}"
								}
							]
						},
						"description": "Get network statistics.\n\n**Args**\n\n- `type` - include some of values `status`, `tx`, `rx`, `tx_drops`, `rx_drops`."
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v2/stat/nodes/{{node_id}}/network/{{ifname}}/?params={\"types\": list, \"filters\": {\"from\": \"YYYY-mm-ddTHH:MM:SS.ffffff\", \"to\": \"YYYY-mm-ddTHH:MM:SS.ffffff\"}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"stat",
										"nodes",
										"{{node_id}}",
										"network",
										"{{ifname}}",
										""
									],
									"query": [
										{
											"key": "params",
											"value": "{\"types\": list, \"filters\": {\"from\": \"YYYY-mm-ddTHH:MM:SS.ffffff\", \"to\": \"YYYY-mm-ddTHH:MM:SS.ffffff\"}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "content-type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"data\": [\n        [\n            \"YYYY-mm-ddTHH:MM:SS.ffffff\",\n            value1,\n            value2,\n            ...\n            valueN\n        ],\n        ...\n    ]\n}"
						}
					]
				},
				{
					"name": "Get Object Store cluster statistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// chack status\r",
									"pm.test(\"Response is OK\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//check success\r",
									"pm.test(\"Response is success\", function () {\r",
									"    pm.response.to.be.success;\r",
									"});\r",
									"\r",
									"\r",
									"// //check format\r",
									"// pm.test(\"Response is json format\", function () {\r",
									"//     pm.response.to.be.json;\r",
									"// });\r",
									"\r",
									"// pm.test(\"Status code is 404\", function () {\r",
									"//     pm.response.to.have.status(404);\r",
									"// });\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v2/{{cluster_id}}/stat/s3/?params={\"types\": list, \"filters\": {\"from\": \"YYYY-mm-ddTHH:MM:SS.ffffff\", \"to\": \"YYYY-mm-ddTHH:MM:SS.ffffff\"}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"{{cluster_id}}",
								"stat",
								"s3",
								""
							],
							"query": [
								{
									"key": "params",
									"value": "{\"types\": list, \"filters\": {\"from\": \"YYYY-mm-ddTHH:MM:SS.ffffff\", \"to\": \"YYYY-mm-ddTHH:MM:SS.ffffff\"}}"
								}
							]
						},
						"description": "Get Object Store cluster statistics.\n\n**Args**\n\n- `type` - include some of values `os_total`, `os_avail`, `ns_total`, `ns_avail`, `s3gw_total`, `s3gw_avail`, `ns_rps`, `os_rps`, `s3gw_rps`"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v2/{{cluster_id}}/stat/s3/?params={\"types\": list, \"filters\": {\"from\": \"YYYY-mm-ddTHH:MM:SS.ffffff\", \"to\": \"YYYY-mm-ddTHH:MM:SS.ffffff\"}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"{{cluster_id}}",
										"stat",
										"s3",
										""
									],
									"query": [
										{
											"key": "params",
											"value": "{\"types\": list, \"filters\": {\"from\": \"YYYY-mm-ddTHH:MM:SS.ffffff\", \"to\": \"YYYY-mm-ddTHH:MM:SS.ffffff\"}}"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "{\n    \"data\": [\n        [\n            \"YYYY-mm-ddTHH:MM:SS.ffffff\",\n            value1,\n            value2,\n            ...\n            valueN\n        ],\n        ...\n    ]\n}"
						}
					]
				}
			]
		},
		{
			"name": "Software Update",
			"item": [
				{
					"name": "/<int:cluster_id>/software_updates/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// chack status\r",
									"pm.test(\"Response is OK\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//check success\r",
									"pm.test(\"Response is success\", function () {\r",
									"    pm.response.to.be.success;\r",
									"});\r",
									"\r",
									"\r",
									"//check format\r",
									"pm.test(\"Response is json format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"// pm.test(\"Status code is 404\", function () {\r",
									"//     pm.response.to.have.status(404);\r",
									"// });\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/{{cluster_id}}/software_updates/",
							"host": [
								"{{url}}"
							],
							"path": [
								"{{cluster_id}}",
								"software_updates",
								""
							]
						},
						"description": "Get a status of software updates for all nodes in the cluster.\n\n**Return:**\n\n```\n{\n    \"is_available\": bool,      # Is updates available for any node\n    \"tasks\": [int, ],          # mandatory if the run task is 'software_updates_check'\n    \"nodes\": [\n        {\n        \"id\": UUID,            # node_id\n        \"host\": string,        # hostname or ipaddr\n        \"is_available\": bool,  # Is updates available for the node\n        \"tasks\": [int, ]       # mandatory if the run task is 'software_updates_start'\n        },\n    ]\n}\n```"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/{{cluster_id}}/software_updates/",
									"host": [
										"{{url}}"
									],
									"path": [
										"{{cluster_id}}",
										"software_updates",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"is_available\": {{$randomBoolean}},\n    \"tasks\": [{{$randomInt}}, {{$randomInt}}],\n    \"nodes\": [\n        {\n            \"id\": \"{{$randomUUID}}\",\n            \"host\": \"{{$randomIP}}\",\n            \"is_available\": {{$randomBoolean}},\n            \"tasks\": [{{$randomInt}}, {{$randomInt}}]\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "/<int:cluster_id>/software_updates/start/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// chack status\r",
									"pm.test(\"Response is OK\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//check success\r",
									"pm.test(\"Response is success\", function () {\r",
									"    pm.response.to.be.success;\r",
									"});\r",
									"\r",
									"\r",
									"//check format\r",
									"pm.test(\"Response is json format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"\r",
									"// pm.test(\"Status code is 404\", function () {\r",
									"//     pm.response.to.have.status(404);\r",
									"// });\r",
									"\r",
									"\r",
									"//save task_if\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set('task_id', jsonData.task_id);\r",
									"pm.test(\"task_id is saved\", function() {\r",
									"pm.expect(jsonData.task_id).to.eql(pm.environment.get(\"task_id\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{url}}/{{cluster_id}}/software_updates/start/",
							"host": [
								"{{url}}"
							],
							"path": [
								"{{cluster_id}}",
								"software_updates",
								"start",
								""
							]
						},
						"description": "Start an update operation in the cluster."
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/{{cluster_id}}/software_updates/start/",
									"host": [
										"{{url}}"
									],
									"path": [
										"{{cluster_id}}",
										"software_updates",
										"start",
										""
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"task_id\": \"{{$randomUUID}}\"\n}"
						}
					]
				},
				{
					"name": "/<int:cluster_id>/software_updates/check/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// chack status",
									"pm.test(\"Response is OK\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//check success",
									"pm.test(\"Response is success\", function () {",
									"    pm.response.to.be.success;",
									"});",
									"",
									"",
									"//check format",
									"pm.test(\"Response is json format\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"//content-type",
									"pm.test(\"Content-Type is correct\", function () {",
									"    pm.expect(pm.response.headers.get('content-type')).is.eql('application/json; charset=utf-8');",
									"    // ct.is.have('application/json; charset=utf-8');",
									"});",
									"",
									"// pm.test(\"Return Id String: UUID\", function () {",
									"//     var jsonData = pm.response.json();",
									"//     pm.expect(jsonData.id).is.string;",
									"// });",
									"",
									"//save task_if",
									"var jsonData = JSON.parse(responseBody);",
									"pm.environment.set('task_id', jsonData.task_id);",
									"pm.test(\"task_id is saved\", function() {",
									"pm.expect(jsonData.task_id).to.eql(pm.environment.get(\"task_id\"));",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{url}}/{{cluster_id}}/software_updates/check/",
							"host": [
								"{{url}}"
							],
							"path": [
								"{{cluster_id}}",
								"software_updates",
								"check",
								""
							]
						},
						"description": "Run a checking updates in the cluster."
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/{{cluster_id}}/software_updates/check/",
									"host": [
										"{{url}}"
									],
									"path": [
										"{{cluster_id}}",
										"software_updates",
										"check",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"task_id\": \"{{$randomUUID}}\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "Nodes",
			"item": [
				{
					"name": "Disks",
					"item": [
						{
							"name": "/api/v2/disks/<string:node_ip>/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// chack status\r",
											"pm.test(\"Response is OK\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//check success\r",
											"pm.test(\"Response is success\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											"\r",
											"\r",
											"//check format\r",
											"pm.test(\"Response is json format\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v2/disks/{{$randomIP}}/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"disks",
										"{{$randomIP}}",
										""
									]
								},
								"description": "Return info about disks on node"
							},
							"response": [
								{
									"name": "/api/v2/disks/<string:node_ip>/",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v2/disks/{{node_ip}}/",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"disks",
												"{{node_ip}}",
												""
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": null,
									"cookie": [],
									"body": "{\n    \"data\": [\n        {\n            \"is_ssd\": <boolean>,\n            \"name\": <string>,\n            \"size\": <int: size in bytes>,\n            \"type\": <string>,\n            \"partitions\": [\n                {\n                    \"free_size\": <int: size in bytes>,\n                    \"fstype\": <string>,\n                    \"is_ssd\": <boolean>,\n                    \"mountpoint\": <string>,\n                    \"name\": \"sda1\",\n                    \"size\": <int: size in bytes>,\n                    \"type\": \"part\"\n                },\n                \n            ]           \n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "/api/v2/disks/<string:node_ip>/ Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// chack status\r",
											"pm.test(\"Response is OK\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//check success\r",
											"pm.test(\"Response is success\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											"\r",
											"\r",
											"//check format\r",
											"pm.test(\"Response is json format\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v2/disks/{{$randomIP}}/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"disks",
										"{{$randomIP}}",
										""
									]
								},
								"description": "Return info about disks on node"
							},
							"response": [
								{
									"name": "/api/v2/disks/<string:node_ip>/",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v2/disks/{{node_ip}}/",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"disks",
												"{{node_ip}}",
												""
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": null,
									"cookie": [],
									"body": "{\n    \"data\": [\n        {\n            \"free_size\": null,\n            \"fstype\": \"\",\n            \"is_ssd\": false,\n            \"mountpoint\": \"\",\n            \"name\": \"sda\",\n            \"size\": 64424509440,\n            \"type\": \"disk\"\n        },\n        {\n            \"free_size\": 13492928512,\n            \"fstype\": \"ext4\",\n            \"is_ssd\": false,\n            \"mountpoint\": \"/vz\",\n            \"name\": \"sda1\",\n            \"size\": 13887340544,\n            \"type\": \"part\"\n        },\n        {\n            \"free_size\": 5602607104,\n            \"fstype\": \"ext4\",\n            \"is_ssd\": false,\n            \"mountpoint\": \"/\",\n            \"name\": \"sda2\",\n            \"size\": 10485760000,\n            \"type\": \"part\"\n        },\n        {\n            \"free_size\": 10148970496,\n            \"fstype\": \"ext4\",\n            \"is_ssd\": false,\n            \"mountpoint\": \"/sdb\",\n            \"name\": \"sda3\",\n            \"size\": 10485760000,\n            \"type\": \"part\"\n        },\n        {\n            \"free_size\": null,\n            \"fstype\": \"\",\n            \"is_ssd\": false,\n            \"mountpoint\": \"\",\n            \"name\": \"sda4\",\n            \"size\": 1024,\n            \"type\": \"part\"\n        },\n        {\n            \"free_size\": 9879433216,\n            \"fstype\": \"ext4\",\n            \"is_ssd\": false,\n            \"mountpoint\": \"/sdc\",\n            \"name\": \"sda5\",\n            \"size\": 10485760000,\n            \"type\": \"part\"\n        },\n        {\n            \"free_size\": 9879420928,\n            \"fstype\": \"ext4\",\n            \"is_ssd\": false,\n            \"mountpoint\": \"/sdd\",\n            \"name\": \"sda6\",\n            \"size\": 10485760000,\n            \"type\": \"part\"\n        },\n        {\n            \"free_size\": null,\n            \"fstype\": \"swap\",\n            \"is_ssd\": false,\n            \"mountpoint\": \"[SWAP]\",\n            \"name\": \"sda7\",\n            \"size\": 8588886016,\n            \"type\": \"part\"\n        }\n    ]\n}"
								}
							]
						}
					],
					"description": "Disk info on node\n\nProvides 1 endpoint `disks`"
				},
				{
					"name": "Nodes",
					"item": [
						{
							"name": "Get Nodes List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// chack status\r",
											"pm.test(\"Response is OK\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//check success\r",
											"pm.test(\"Response is success\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											"\r",
											"\r",
											"//check format\r",
											"// pm.test(\"Response is json format\", function () {\r",
											"//     pm.response.to.be.json;\r",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v2/nodes/?params={\"cluster\": [clusterId1, clusterId2, ..., clusterIdN, null]}",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"nodes",
										""
									],
									"query": [
										{
											"key": "params",
											"value": "{\"cluster\": [clusterId1, clusterId2, ..., clusterIdN, null]}"
										}
									]
								},
								"description": "Get nodes list.\n\nNOTE: Need to refactor!"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v2/nodes/?params={\"cluster\": [clusterId1, clusterId2, ..., clusterIdN, null]}",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"nodes",
												""
											],
											"query": [
												{
													"key": "params",
													"value": "{\"cluster\": [clusterId1, clusterId2, ..., clusterIdN, null]}"
												}
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": null,
									"cookie": [],
									"body": "{\n    \"data\": [\n        {\n            \"id\": UUID,\n            \"host\": str,\n            \"roles\": {\n                \"service1\": {\n                    \"status1\": int,\n                    \"status2\": int,\n                    ...\n                },\n                \"service2\": {\n                    \"status1\": int,\n                    \"status2\": int,\n                    ...\n                },\n                ...\n            },\n            \"is_assigned\": bool,\n            \"is_online\": bool,\n            \"tasks\": {\n                \"id\": UUID,\n                \"status\": str\n            }\n        },    \n    ]\n}"
								}
							]
						},
						{
							"name": "Register",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// chack status\r",
											"pm.test(\"Response is OK\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//check success\r",
											"pm.test(\"Response is success\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											"\r",
											"\r",
											"//check format\r",
											"// pm.test(\"Response is json format\", function () {\r",
											"//     pm.response.to.be.json;\r",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nodes\": [\n        {\n            \"host\" : \"<str>\",\n            \"password\": \"<str>\",\n            \"port\": \"<int>\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v2/nodes/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"nodes",
										""
									]
								},
								"description": "Register a couple of nodes."
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v2/nodes/",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"nodes",
												""
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": null,
									"cookie": [],
									"body": "{\n    \"data\": [\n        {\n            \"host\": <string>,  // subdomain.domain.com\n            \"task\" : {\n                \"task_id\": <int>,  // if success\n                \"error\": <string>  // if fail\n            }\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "Node detail",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// chack status\r",
											"pm.test(\"Response is OK\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//check success\r",
											"pm.test(\"Response is success\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											"\r",
											"\r",
											"//check format\r",
											"// pm.test(\"Response is json format\", function () {\r",
											"//     pm.response.to.be.json;\r",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v2/nodes/{{node_id}}/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"nodes",
										"{{node_id}}",
										""
									]
								},
								"description": "Get detail info about node"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v2/nodes/{{node_id}}/",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"nodes",
												"{{node_id}}",
												""
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": null,
									"cookie": [],
									"body": "{\n    \"id\": UUID,\n    \"host\": str,\n    \"roles\": {\n        \"service1\": {\n            \"status1\": int,\n            \"status2\": int,\n            ...\n        },\n        \"service2\": {\n            \"status1\": int,\n            \"status2\": int,\n            ...\n        },\n        ...\n    },\n    \"is_assigned\": bool,\n    \"is_online\": bool,\n    \"tasks\": {\n        \"id\": UUID,\n        \"status\": str\n    },\n    \"cpu_cores\": int,\n    \"mem_total\": int\n}"
								}
							]
						},
						{
							"name": "/api/v2/<int:cluster_id>/nodes/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// chack status\r",
											"pm.test(\"Response is OK\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//check success\r",
											"pm.test(\"Response is success\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											"\r",
											"\r",
											"//check format\r",
											"// pm.test(\"Response is json format\", function () {\r",
											"//     pm.response.to.be.json;\r",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v2/{{cluster_id}}/nodes/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"{{cluster_id}}",
										"nodes",
										""
									]
								},
								"description": "Get list of all nodes in cluster"
							},
							"response": [
								{
									"name": "/api/v2/<int:cluster_id>/nodes/",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v2/{{cluster_id}}/nodes/",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"{{cluster_id}}",
												"nodes",
												""
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": null,
									"cookie": [],
									"body": "{\n    \"data\": [\n        {\n            \"id\": <string>,\n            \"host\": <string>\n        },\n    ]\n}"
								}
							]
						}
					],
					"description": "Need to refactor!"
				},
				{
					"name": "Node",
					"item": [
						{
							"name": "/api/<int:cluster_id>/nodes/<string:node_id>/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// chack status\r",
											"pm.test(\"Response is OK\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//check success\r",
											"pm.test(\"Response is success\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											"\r",
											"\r",
											"//check format\r",
											"// pm.test(\"Response is json format\", function () {\r",
											"//     pm.response.to.be.json;\r",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/{{cluster_id}}/nodes/{{node_id}}/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"{{cluster_id}}",
										"nodes",
										"{{node_id}}",
										""
									]
								},
								"description": "Get detailed info about node services and disks"
							},
							"response": [
								{
									"name": "/api/<int:cluster_id>/nodes/<string:node_id>/",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/{{cluster_id}}/nodes/{{node_id}}/",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"{{cluster_id}}",
												"nodes",
												"{{node_id}}",
												""
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": null,
									"cookie": [],
									"body": "{\n    \"disks\": [\n        {\n            \"free_size\": <int>,\n            \"fstype\": <string>,\n            \"is_ssd\": <boolean>,\n            \"mountpoint\": <string>,\n            \"name\": <string>,\n            \"partitions\": [\n                {\n                    \"free_size\": <int: size in bytes>,\n                    \"fstype\": <string>,\n                    \"is_ssd\": <boolean>,\n                    \"mountpoint\": <string>,\n                    \"name\": <string>,\n                    \"size\": <int: size in bytes>,\n                    \"type\": <string>\n                },\n                {\n                    \"free_size\": <int: size in bytes>,\n                    \"fstype\": <string>,\n                    \"is_ssd\": <boolean>,\n                    \"mountpoint\": <string>,\n                    \"name\": <string>,\n                    \"size\": <int: size in bytes>,\n                    \"type\": <string>\n                    \"services\": [\n                        {\n                            \"device\": <string>,\n                            \"id\": <int>,\n                            \"status\": <string>,\n                            \"type\": <string>\n                        },\n                    ],\n                },\n            ],\n            \"size\": <int: size in bytes>,\n            \"type\": <string>\n        }\n    ],\n    \"id\": <string>,\n    \"host\": <string>\n}"
								}
							]
						},
						{
							"name": "/api/v2/nodes/<string:node_id>/network/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// chack status\r",
											"pm.test(\"Response is OK\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//check success\r",
											"pm.test(\"Response is success\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											"\r",
											"\r",
											"//check format\r",
											"// pm.test(\"Response is json format\", function () {\r",
											"//     pm.response.to.be.json;\r",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v2/nodes/{{node_id}}/network/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"nodes",
										"{{node_id}}",
										"network",
										""
									]
								},
								"description": "Get node network list."
							},
							"response": [
								{
									"name": "/api/v2/nodes/<string:node_id>/network/",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v2/nodes/{{node_id}}/network/",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"nodes",
												"{{node_id}}",
												"network",
												""
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"data\": [\n        {\n            \"ifname\": str,\n            \"state\": (\"up\"|\"down\")\n            \"hwaddr\": str,\n            \"addrs\": {\n                \"ipv4\": [\n                    {\n                        \"addr\": str,\n                        \"netmask\": str,\n                        \"broadcast\": str\n                    },\n                    ...\n                ],\n                \"ipv6\": [\n                    {\n                        \"addr\": str,\n                        \"netmask\": str,\n                        \"broadcast\": str\n                    },\n                    ...\n                ]\n            },\n            \"mtu\": int,\n            \"duplex\": (\"full\"|\"half\"),\n            \"speeds\": {\n                \"max\": int,\n                \"current\": int\n            },\n            \"errs\": int\n        },\n        ...\n    ]\n}"
								}
							]
						},
						{
							"name": "/api/v2/nodes/<string:node_id>/network/<string:ifname>/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// chack status\r",
											"pm.test(\"Response is OK\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//check success\r",
											"pm.test(\"Response is success\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											"\r",
											"\r",
											"//check format\r",
											"// pm.test(\"Response is json format\", function () {\r",
											"//     pm.response.to.be.json;\r",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v2/nodes/{{node_id}}/network/{{ifname}}/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"nodes",
										"{{node_id}}",
										"network",
										"{{ifname}}",
										""
									]
								},
								"description": "Get node network detail."
							},
							"response": [
								{
									"name": "/api/v2/nodes/<string:node_id>/network/<string:ifname>/",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v2/nodes/{{node_id}}/network/{{ifname}}/",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"nodes",
												"{{node_id}}",
												"network",
												"{{ifname}}",
												""
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": null,
									"cookie": [],
									"body": "{\n    \"ifname\": str,\n    \"state\": (\"up\"|\"down\")\n    \"hwaddr\": str,\n    \"addrs\": {\n        \"ipv4\": [\n            {\n                \"addr\": str,\n                \"netmask\": str,\n                \"broadcast\": str\n            },\n            ...\n        ],\n        \"ipv6\": [\n            {\n                \"addr\": str,\n                \"netmask\": str,\n                \"broadcast\": str\n            },\n            ...\n        ]\n    },\n    \"mtu\": int,\n    \"duplex\": (\"full\"|\"half\"),\n    \"speeds\": {\n        \"max\": int,\n        \"current\": int\n    },\n    \"errs\": int\n}"
								}
							]
						},
						{
							"name": "/api/v2/<int:cluster_id>/nodes/<int:node_id>/default_mds_ipaddr/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// chack status\r",
											"pm.test(\"Response is OK\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//check success\r",
											"pm.test(\"Response is success\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											"\r",
											"\r",
											"//check format\r",
											"// pm.test(\"Response is json format\", function () {\r",
											"//     pm.response.to.be.json;\r",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v2/{{cluster_id}}/nodes/{{node_id}}/default_mds_ipaddr/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"{{cluster_id}}",
										"nodes",
										"{{node_id}}",
										"default_mds_ipaddr",
										""
									]
								},
								"description": "Get defailt ip address for MDS."
							},
							"response": [
								{
									"name": "/api/v2/<int:cluster_id>/nodes/<int:node_id>/default_mds_ipaddr/",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v2/{{cluster_id}}/nodes/{{node_id}}/default_mds_ipaddr/",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"{{cluster_id}}",
												"nodes",
												"{{node_id}}",
												"default_mds_ipaddr",
												""
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": null,
									"cookie": [],
									"body": "{\n    \"addr\": str,\n}"
								}
							]
						}
					],
					"description": "Single node info"
				}
			],
			"description": "Nodes info and manipulations\n\nProvides endpoints:\n- `nodes`\n- `nodes_list`\n- `node`\n- `register_node`\n- `node_performance`"
		},
		{
			"name": "License",
			"item": [
				{
					"name": "/api/v2/<int:cluster_id>/license/as/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// chack status\r",
									"pm.test(\"Response is OK\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//check success\r",
									"pm.test(\"Response is success\", function () {\r",
									"    pm.response.to.be.success;\r",
									"});\r",
									"\r",
									"\r",
									"//check format\r",
									"// pm.test(\"Response is json format\", function () {\r",
									"//     pm.response.to.be.json;\r",
									"// });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v2/{{cluster_id}}/license/as/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"{{cluster_id}}",
								"license",
								"as",
								""
							]
						},
						"description": "Get cluster license."
					},
					"response": [
						{
							"name": "/api/v2/<int:cluster_id>/license/as/",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v2/{{cluster_id}}/license/as/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"{{cluster_id}}",
										"license",
										"as",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": null,
							"cookie": [],
							"body": "{\n    \"capacity\": int,\n    \"expiration\": datetime,  // ISO UTC format\n    \"used_size\": int,\n    \"trial\": bool\n}"
						}
					]
				},
				{
					"name": "/api/v2/<int:cluster_id>/license/as/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// chack status\r",
									"pm.test(\"Response is OK\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//check success\r",
									"pm.test(\"Response is success\", function () {\r",
									"    pm.response.to.be.success;\r",
									"});\r",
									"\r",
									"\r",
									"//check format\r",
									"// pm.test(\"Response is json format\", function () {\r",
									"//     pm.response.to.be.json;\r",
									"// });\r",
									"\r",
									"//check response\r",
									"pm.test(\"Response is empty\", ()=> {\r",
									"    pm.expect(pm.response.text).to.length(0);\r",
									"});\r",
									"\r",
									"//check response\r",
									"pm.test(\"Response is empty\", ()=> {\r",
									"    pm.expect(pm.response.text).to.length(0);\r",
									"});\r",
									"\r",
									"//check response\r",
									"pm.test(\"Response is empty\", ()=> {\r",
									"    pm.expect(pm.response.text).to.length(0);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"keys\": [string, ...],\n    \"type\": string enum of (prolong, upgrade)\n}"
						},
						"url": {
							"raw": "{{url}}/api/v2/{{cluster_id}}/license/as/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"{{cluster_id}}",
								"license",
								"as",
								""
							]
						},
						"description": "Activate license keys"
					},
					"response": [
						{
							"name": "/api/v2/<int:cluster_id>/license/as/",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"keys\": [string, ...],\n    \"type\": string enum of (prolong, upgrade)\n}"
								},
								"url": {
									"raw": "{{url}}/api/v2/{{cluster_id}}/license/as/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"{{cluster_id}}",
										"license",
										"as",
										""
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "Text",
							"header": null,
							"cookie": [],
							"body": null
						}
					]
				}
			],
			"description": "Storage license."
		},
		{
			"name": "Errors",
			"item": [],
			"description": "### Errors reporting\n\n* designates optional field \n\n```\n{\n    \"error\": {\n          \"errors\": [                // errors for grouped operations  \n           {\n               \"operation\": string, // denotes operation has been failed\n               \"code\": string,      // code equally identifying the error\n               \"message\": string,   // message describing an error\n               *\"trace\": str        // stack trace\n           }, ...\n          ],\n          \"http_code\": int,          // http code\n          \"subsystem\": string,       // subsystem iSCSI, S3, ABGW, etc\n          \"operation\": string,        \n          \"code\": string,\n          *\"message\": string,\n          *\"fields\": {\n              \"field1\": [string, ...], // Simple field\n              \"field2\": {\n                  \"0\": [string, ...],\n                  \"1\": [string, ...],\n                  ...\n                  \"N\": [string, ...]\n              },  // Array field\n              ...\n              \"fieldM\": [string, ...]\n          },\n          *\"traceback\": str\n         }\n    }\n}\n```\n\n### Examples:\n\n#### Some error\n```\n{\n    \"error\": {\n        \"errors\": [\n        {\n            \"operation\": \"create lun\",\n            \"code\": \"CreateLUNError\"\n            \"message\": \"Unable to create LUN. vstorage-iscsi returns error code 123 with message 'Blah blah'\",\n            \"trace\": str\n        }, ...\n        ],\n        \"http_code\": 400,\n        \"subsystem\": \"iSCSI\"\n        \"operation\": \"create target\",\n        \"code\": \"CreateTargetError\",\n        \"message\": \"Cannot find cluster with id \\\"1\\\"\",\n        \"traceback\": null\n        }\n    }\n}\n```\n\n#### Fields validation error\n```\n{\n    \"error\": {\n        \"http_code\": 400,\n        \"subsystem\": \"iSCSI\"\n        \"operation\": \"create target\",\n        \"code\": \"CreateTargetError\",\n        \"errors\": [],\n        \"fields\": {\n            \"mut_owner\": [\n                \"Cannot find user \\\"fghfg\\\" in cluster \\\"2\\\"\"\n             ],\n            \"owner\": [\n                \"Cannot find user \\\"usss\\\" in cluster \\\"2\\\"\"\n            ],\n            \"portals\": {\n                \"0\": [\n                    \"Portal IP address cannot be loopback address\"\n                ],\n                \"1\": [\n                    \"Portal IP address cannot be unspecified address\"\n                ],\n                \"2\": [\n                    \"Duplicates portal IP address\"\n                ]\n            }\n        },\n        \"traceback\": null\n    }\n}\n```\n\n* Agent **always** returns flat error messages\n* Backend can return flat as well as composite message\n* Generally backend wraps up agent's errors to provide high level description of a problem"
		},
		{
			"name": "Overview",
			"item": [
				{
					"name": "/api/v2/overview/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// chack status\r",
									"pm.test(\"Response is OK\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//check success\r",
									"pm.test(\"Response is success\", function () {\r",
									"    pm.response.to.be.success;\r",
									"});\r",
									"\r",
									"\r",
									"//check format\r",
									"// pm.test(\"Response is json format\", function () {\r",
									"//     pm.response.to.be.json;\r",
									"// });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v2/overview/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"overview",
								""
							]
						},
						"description": "Get list of all clusters with state"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v2/overview/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"overview",
										""
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "{\n    \"data\": [\n        {\n            \"id\": int,\n            \"name\": str,\n            \"status\": str,\n            \"cs\": {\n                \"failed\": int,\n                \"total\": int\n            },\n            \"mds\": {\n                \"failed\": int,\n                \"total\": int\n            },\n            \"license\": {\n                \"capacity\": int,\n                \"expiration_ts\": int,\n                \"keynumber\": str,\n                \"status\": int\n            },\n            \"logs\": [\n                {\n                    \"message\": str,\n                    \"severity\": str,\n                    \"subsystem\": str\n                },\n                ...\n            ],\n            \"performance\": {\n                \"errors\": [\n                    {\n                        \"cs_id\": int,\n                        \"latency\": float\n                    },\n                    ...\n                ],\n                \"warnings\": [\n                    {\n                        \"cs_id\": int,\n                        \"latency\": float\n                    },\n                    ...\n                ]\n            },\n            \"space\": {\n                \"allocatable\": int,\n                \"allocatable_raw\": int,\n                \"effective_total\": int,\n                \"free\": int,\n                \"total\": int,\n                \"total_raw\": int\n            }\n        },\n        ...\n    ]\n}"
						}
					]
				},
				{
					"name": "/overview/<int:cluster_id>/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// chack status\r",
									"pm.test(\"Response is OK\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//check success\r",
									"pm.test(\"Response is success\", function () {\r",
									"    pm.response.to.be.success;\r",
									"});\r",
									"\r",
									"\r",
									"//check format\r",
									"// pm.test(\"Response is json format\", function () {\r",
									"//     pm.response.to.be.json;\r",
									"// });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/overview/{{cluster_id}}/",
							"host": [
								"{{url}}"
							],
							"path": [
								"overview",
								"{{cluster_id}}",
								""
							]
						},
						"description": "Cluster overview details"
					},
					"response": [
						{
							"name": "OK",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/overview/{{cluster_id}}/",
									"host": [
										"{{url}}"
									],
									"path": [
										"overview",
										"{{cluster_id}}",
										""
									]
								}
							},
							"_postman_previewlanguage": "Text",
							"header": null,
							"cookie": [],
							"body": "{\n    \"id\": int,\n    \"name\": str,\n    \"status\": str,\n    \"chunks\": {\n        \"blocked\": int,\n        \"degraded\": int,\n        \"deleting\": int,\n        \"healthy\": int,\n        \"offline\": int,\n        \"overcommitted\": int,\n        \"pending\": int,\n        \"replicating\": int,\n        \"standby\": int,\n        \"total\": int,\n        \"unique\": int,\n        \"urgent\": int,\n        \"void\": int\n    },\n    \"fs_stat\": {\n        \"chunk_maps\": int,\n        \"chunk_nodes\": int,\n        \"file_maps\": int,\n        \"files\": int,\n        \"inodes\": int,\n        \"used_size\": int\n    },\n    \"license\": {\n        \"capacity\": int,\n        \"expiration_ts\": int,\n        \"keynumber\": str,\n        \"status\": int,\n        \"used_size\": int\n    },\n    \"tiers\": [\n        {\n            \"id\": int,\n            \"logic_space\": {\n                \"free\": int,\n                \"total\": int,\n                \"used\": int\n            },\n            \"phys_space\": {\n                \"free\": int,\n                \"total\": int,\n                \"used\": int\n            }\n        },\n        ...\n    ],\n    \"repl\": {\n        \"eta\": int, \n        \"reads\": int, \n        \"writes\": int\n    },\n    \"resistance\": {\n        \"to_lose\": int,\n        \"total\": int\n    }\n}"
						}
					]
				}
			],
			"description": "# Common info about clusters state\n\nProvides 2 endpoints: `overview` and `clusters_overview`"
		},
		{
			"name": "S3",
			"item": [
				{
					"name": "Ostor Cluster",
					"item": [
						{
							"name": "/api/v2/<int:cluster_id>/s3/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// chack status\r",
											"pm.test(\"Response is OK\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//check success\r",
											"pm.test(\"Response is success\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											"\r",
											"\r",
											"//check format\r",
											"// pm.test(\"Response is json format\", function () {\r",
											"//     pm.response.to.be.json;\r",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v2/{{cluster_id}}/s3/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"{{cluster_id}}",
										"s3",
										""
									]
								},
								"description": "Get ostor cluster detail"
							},
							"response": [
								{
									"name": "/api/v2/<int:cluster_id>/s3/",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v2/{{cluster_id}}/s3/",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"{{cluster_id}}",
												"s3",
												""
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "Text",
									"header": null,
									"cookie": [],
									"body": "{\n    \"id\": int,\n    \"name\": str,\n    \"password\": str,\n    \"s3gw_domain\": str,\n    \"redundancy\": {\n        \"type\": string enum (raid1, raid6),\n        \"m\": int,\n        \"n\": int  // optional\n    }, // nullbale\n    \"tier\": int,\n    \"nodes\": [\n        {\"id\": uuid},\n         ...\n    ],\n    \"np\": {\n        \"uri\": str,\n        \"key\": str\n    } // nullable\n}"
								}
							]
						},
						{
							"name": "/api/v2/<int:cluster_id>/s3/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// chack status\r",
											"pm.test(\"Response is accepted\", function () {\r",
											"    pm.response.to.be.accepted;\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 202\", function () {\r",
											"    pm.response.to.have.status(202);\r",
											"});\r",
											"\r",
											"//check success\r",
											"pm.test(\"Response is success\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											"\r",
											"\r",
											"//check format\r",
											"// pm.test(\"Response is json format\", function () {\r",
											"//     pm.response.to.be.json;\r",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nodes\":[\n        {\n            \"id\": \"uuid\",\n            \"priv_net_if\": \"str\",\n            \"pub_net_if\": \"str  // optional\"\n        }\n    ],\n    \"n_ns\":\"int\",\n    \"n_os\":\"int\",\n    \"s3gw_domain\":\"str\",\n    \"tier\":\"int\",\n    \"redundancy\":{\n        \"type\": \"string enum (raid1, raid6)\",\n        \"m\":\"int\",\n        \"n\":\"int\"\n    },\n    \"np\": {\n        \"uri\":\"str\",\n        \"key\":\"str\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v2/{{cluster_id}}/s3/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"{{cluster_id}}",
										"s3",
										""
									]
								},
								"description": "Create ostor cluster"
							},
							"response": [
								{
									"name": "/api/v2/<int:cluster_id>/s3/",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"nodes\": [\n        {\n            \"id\": uuid,\n            \"priv_net_if\": str,\n            \"pub_net_if\": str  // optional\n        },\n        ...\n    ],\n    \"n_ns\": int, \n    \"n_os\": int, \n    \"s3gw_domain\": str,\n    \"tier\": int,\n    \"redundancy\": {\n        \"type\": string enum (raid1, raid6),\n        \"m\": int,\n        \"n\": int\n    },\n    \"np\": {\n        \"uri\": str,\n        \"key\": str,\n    } // optional\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v2/{{cluster_id}}/s3/",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"{{cluster_id}}",
												"s3",
												""
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "Text",
									"header": null,
									"cookie": [],
									"body": "{\n    \"task_id\": uuid\n}"
								}
							]
						},
						{
							"name": "/api/v2/<int:cluster_id>/s3/ Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// chack status\r",
											"pm.test(\"Response is created\", function () {\r",
											"    pm.response.to.be.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"//check success\r",
											"pm.test(\"Response is success\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											"\r",
											"\r",
											"//check format\r",
											"// pm.test(\"Response is json format\", function () {\r",
											"//     pm.response.to.be.json;\r",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nodes\":[\n        {\n            \"id\": \"uuid\",\n            \"priv_net_if\": \"str\",\n            \"pub_net_if\": \"str  // optional\"\n        }\n    ],\n    \"n_ns\":\"int\",\n    \"n_os\":\"int\",\n    \"s3gw_domain\":\"str\",\n    \"tier\":\"int\",\n    \"redundancy\":{\n        \"type\": \"string enum (raid1, raid6)\",\n        \"m\":\"int\",\n        \"n\":\"int\"\n    },\n    \"np\": {\n        \"uri\":\"str\",\n        \"key\":\"str\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v2/{{cluster_id}}/s3/?sync",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"{{cluster_id}}",
										"s3",
										""
									],
									"query": [
										{
											"key": "sync",
											"value": null
										}
									]
								},
								"description": "Create ostor cluster"
							},
							"response": [
								{
									"name": "/api/v2/<int:cluster_id>/s3/",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"nodes\": [\n        {\n            \"id\": uuid,\n            \"priv_net_if\": str,\n            \"pub_net_if\": str  // optional\n        },\n        ...\n    ],\n    \"n_ns\": int, \n    \"n_os\": int, \n    \"s3gw_domain\": str,\n    \"tier\": int,\n    \"redundancy\": {\n        \"type\": string enum (raid1, raid6),\n        \"m\": int,\n        \"n\": int\n    },\n    \"np\": {\n        \"uri\": str,\n        \"key\": str,\n    } // optional\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v2/{{cluster_id}}/s3/?sync",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"{{cluster_id}}",
												"s3",
												""
											],
											"query": [
												{
													"key": "sync",
													"value": null
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "Text",
									"header": null,
									"cookie": [],
									"body": "{\n    \"id\": int,\n    \"name\": str,\n    \"password\": str,\n    \"s3gw_domain\": str,\n    \"redundancy\": {\n        \"type\": string enum (raid1, raid6),\n        \"m\": int,\n        \"n\": int  // optional\n    }, // nullbale\n    \"tier\": int,\n    \"nodes\": [\n        {\"id\": uuid},\n         ...\n    ],\n    \"np\": {\n        \"uri\": str,\n        \"key\": str\n    } // nullable\n}"
								}
							]
						},
						{
							"name": "/api/v2/<int:cluster_id>/s3/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// chack status\r",
											"pm.test(\"Response is accepted\", function () {\r",
											"    pm.response.to.be.accepted;\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 202\", function () {\r",
											"    pm.response.to.have.status(202);\r",
											"});\r",
											"\r",
											"//check success\r",
											"pm.test(\"Response is success\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											"\r",
											"\r",
											"//check format\r",
											"// pm.test(\"Response is json format\", function () {\r",
											"//     pm.response.to.be.json;\r",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nodes\":[\n        {\n            \"id\": \"uuid\",\n            \"priv_net_if\": \"str\",\n            \"pub_net_if\": \"str  // optional\"\n        }\n    ],\n    \"n_ns\":\"int\",\n    \"n_os\":\"int\",\n    \"s3gw_domain\":\"str\",\n    \"tier\":\"int\",\n    \"redundancy\":{\n        \"type\": \"string enum (raid1, raid6)\",\n        \"m\":\"int\",\n        \"n\":\"int\"\n    },\n    \"np\": {\n        \"uri\":\"str\",\n        \"key\":\"str\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v2/{{cluster_id}}/s3/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"{{cluster_id}}",
										"s3",
										""
									]
								},
								"description": "Create ostor cluster"
							},
							"response": [
								{
									"name": "/api/v2/<int:cluster_id>/s3/",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"tier\": int,\n    \"redundancy\": {\n        \"type\": string enum (raid1, raid6),\n        \"m\": int,\n        \"n\": int\n    },\n    \"np\": {\n        \"uri\": str,\n        \"key\": str\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v2/{{cluster_id}}/s3/",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"{{cluster_id}}",
												"s3",
												""
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "Text",
									"header": null,
									"cookie": [],
									"body": "{\n    \"task_id\": uuid\n}"
								}
							]
						},
						{
							"name": "/api/v2/<int:cluster_id>/s3/?sync",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// chack status\r",
											"pm.test(\"Response is OK\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//check success\r",
											"pm.test(\"Response is success\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											"\r",
											"\r",
											"//check format\r",
											"// pm.test(\"Response is json format\", function () {\r",
											"//     pm.response.to.be.json;\r",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nodes\":[\n        {\n            \"id\": \"uuid\",\n            \"priv_net_if\": \"str\",\n            \"pub_net_if\": \"str  // optional\"\n        }\n    ],\n    \"n_ns\":\"int\",\n    \"n_os\":\"int\",\n    \"s3gw_domain\":\"str\",\n    \"tier\":\"int\",\n    \"redundancy\":{\n        \"type\": \"string enum (raid1, raid6)\",\n        \"m\":\"int\",\n        \"n\":\"int\"\n    },\n    \"np\": {\n        \"uri\":\"str\",\n        \"key\":\"str\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v2/{{cluster_id}}/s3/?sync",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"{{cluster_id}}",
										"s3",
										""
									],
									"query": [
										{
											"key": "sync",
											"value": null
										}
									]
								},
								"description": "Create ostor cluster"
							},
							"response": [
								{
									"name": "/api/v2/<int:cluster_id>/s3/?sync",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"tier\": int,\n    \"redundancy\": {\n        \"type\": string enum (raid1, raid6),\n        \"m\": int,\n        \"n\": int\n    },\n    \"np\": {\n        \"uri\": str,\n        \"key\": str\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v2/{{cluster_id}}/s3/?sync",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"{{cluster_id}}",
												"s3",
												""
											],
											"query": [
												{
													"key": "sync",
													"value": null
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "Text",
									"header": null,
									"cookie": [],
									"body": "{\n    \"id\": int,\n    \"name\": str,\n    \"password\": str,\n    \"s3gw_domain\": str,\n    \"redundancy\": {\n        \"type\": string enum (raid1, raid6),\n        \"m\": int,\n        \"n\": int  // optional\n    }, // nullbale\n    \"tier\": int,\n    \"nodes\": [\n        {\"id\": uuid},\n         ...\n    ],\n    \"np\": {\n        \"uri\": str,\n        \"key\": str\n    } // nullable\n}"
								}
							]
						}
					]
				},
				{
					"name": "Ostor Overview",
					"item": [
						{
							"name": "/api/v2/<int:cluster_id>/s3/overview/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// chack status\r",
											"pm.test(\"Response is OK\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//check success\r",
											"pm.test(\"Response is success\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											"\r",
											"\r",
											"//check format\r",
											"// pm.test(\"Response is json format\", function () {\r",
											"//     pm.response.to.be.json;\r",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v2/{{cluster_id}}/s3/overview/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"{{cluster_id}}",
										"s3",
										"overview",
										""
									]
								},
								"description": "Object store overview details"
							},
							"response": [
								{
									"name": "/api/v2/<int:cluster_id>/s3/overview/",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}]/api/v2/{{cluster_id}}/s3/overview/",
											"host": [
												"{{url}]"
											],
											"path": [
												"api",
												"v2",
												"{{cluster_id}}",
												"s3",
												"overview",
												""
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": null,
									"cookie": [],
									"body": "{\n    \"data\": [\n        {\n            \"id\": int,\n            \"n_users\": int,\n        },\n        ...\n    ]\n}"
								}
							]
						}
					]
				},
				{
					"name": "Assign nodes to ostor cluster",
					"item": [
						{
							"name": "/api/v2/<int:cluster_id>/s3/nodes/assign/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// chack status\r",
											"pm.test(\"Response is accepted\", function () {\r",
											"    pm.response.to.be.accepted;\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 202\", function () {\r",
											"    pm.response.to.have.status(202);\r",
											"});\r",
											"\r",
											"//check success\r",
											"pm.test(\"Response is success\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											"\r",
											"\r",
											"//check format\r",
											"// pm.test(\"Response is json format\", function () {\r",
											"//     pm.response.to.be.json;\r",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nodes\":[\n        {\n            \"id\":\"uuid\",\n            \"priv_net_if\":\"str\",\n            \"pub_net_if\":\"str//optional\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{url}}/api/v2/{{cluster_id}}/s3/nodes/assign/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"{{cluster_id}}",
										"s3",
										"nodes",
										"assign",
										""
									]
								}
							},
							"response": [
								{
									"name": "/api/v2/<int:cluster_id>/s3/nodes/assign/",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"nodes\": [\n        {\n            \"id\": uuid,\n            \"priv_net_if\": str,\n            \"pub_net_if\": str  // optional\n        },\n        ...\n    ]\n}"
										},
										"url": {
											"raw": "{{url}}/api/v2/{{cluster_id}}/s3/nodes/assign/",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"{{cluster_id}}",
												"s3",
												"nodes",
												"assign",
												""
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "Text",
									"header": null,
									"cookie": [],
									"body": "{\n    \"task_id\": uuid\n}"
								}
							]
						},
						{
							"name": "/api/v2/<int:cluster_id>/s3/nodes/assign/ Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// chack status\r",
											"pm.test(\"Response is OK\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//check success\r",
											"pm.test(\"Response is success\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											"\r",
											"\r",
											"//check format\r",
											"// pm.test(\"Response is json format\", function () {\r",
											"//     pm.response.to.be.json;\r",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nodes\":[\n        {\n            \"id\":\"uuid\",\n            \"priv_net_if\":\"str\",\n            \"pub_net_if\":\"str//optional\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{url}}/api/v2/{{cluster_id}}/s3/nodes/assign/?sync",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"{{cluster_id}}",
										"s3",
										"nodes",
										"assign",
										""
									],
									"query": [
										{
											"key": "sync",
											"value": null
										}
									]
								}
							},
							"response": [
								{
									"name": "/api/v2/<int:cluster_id>/s3/nodes/assign/ Copy",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v2/{{cluster_id}}/s3/nodes/assign/?sync",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"{{cluster_id}}",
												"s3",
												"nodes",
												"assign",
												""
											],
											"query": [
												{
													"key": "sync",
													"value": null
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "Text",
									"header": null,
									"cookie": [],
									"body": "{\n   \"id\": int,\n   \"name\": str\n}"
								}
							]
						}
					]
				},
				{
					"name": "Release nodes from ostor cluster",
					"item": [
						{
							"name": "/api/v2/<int:cluster_id>/s3/nodes/release/?sync",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// // chack status\r",
											"// pm.test(\"Response is OK\", function () {\r",
											"//     pm.response.to.be.ok;\r",
											"// });\r",
											"\r",
											"// pm.test(\"Status code is 200\", function () {\r",
											"//     pm.response.to.have.status(200);\r",
											"// });\r",
											"\r",
											"// //check success\r",
											"// pm.test(\"Response is success\", function () {\r",
											"//     pm.response.to.be.success;\r",
											"// });\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"\r",
											"//check format\r",
											"pm.test(\"Response is json format\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\"nodes\": [\"{{$randomUUID}}\"]}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v2/{{cluster_id}}/s3/nodes/release/?sync=null",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"{{cluster_id}}",
										"s3",
										"nodes",
										"release",
										""
									],
									"query": [
										{
											"key": "sync",
											"value": "null"
										}
									]
								},
								"description": "Release nodes. Sync (url?sync)"
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"nodes\": [\n        \"{{$randomUUID}}\"\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v2/{{cluster_id}}/s3/nodes/release/?sync",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"{{cluster_id}}",
												"s3",
												"nodes",
												"release",
												""
											],
											"query": [
												{
													"key": "sync",
													"value": null
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "Text",
									"header": null,
									"cookie": [],
									"body": null
								}
							]
						},
						{
							"name": "/api/v2/<int:cluster_id>/s3/nodes/release/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// // chack status\r",
											"// pm.test(\"Response is OK\", function () {\r",
											"//     pm.response.to.be.ok;\r",
											"// });\r",
											"\r",
											"// pm.test(\"Status code is 200\", function () {\r",
											"//     pm.response.to.have.status(200);\r",
											"// });\r",
											"\r",
											"// //check success\r",
											"// pm.test(\"Response is success\", function () {\r",
											"//     pm.response.to.be.success;\r",
											"// });\r",
											"\r",
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"\r",
											"//check format\r",
											"pm.test(\"Response is json format\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"nodes\": [\n        \"{{$randomUUID}}\"\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v2/{{cluster_id}}/s3/nodes/release/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"{{cluster_id}}",
										"s3",
										"nodes",
										"release",
										""
									]
								},
								"description": "Release nodes.\n\n\nReturn:\nSync (url?sync)"
							},
							"response": [
								{
									"name": "Accepted",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"nodes\": [\n        \"{{$randomUUID}}\"\n    ]\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v2/{{cluster_id}}/s3/nodes/release/",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"{{cluster_id}}",
												"s3",
												"nodes",
												"release",
												""
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": "",
											"type": "text"
										}
									],
									"cookie": [],
									"body": "{\n    \"task_id\": \"{{$randomUUID}}\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "S3 users list",
					"item": [
						{
							"name": "/api/v2/<int:cluster_id>/s3/users/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// chack status\r",
											"pm.test(\"Response is OK\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//check success\r",
											"pm.test(\"Response is success\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											"\r",
											"// pm.test(\"Status code is 404\", function () {\r",
											"//     pm.response.to.have.status(404);\r",
											"// });\r",
											"\r",
											"\r",
											"// //check format\r",
											"// pm.test(\"Response is json format\", function () {\r",
											"//     pm.response.to.be.json;\r",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v2/{{cluster_id}}/s3/users/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"{{cluster_id}}",
										"s3",
										"users",
										""
									]
								},
								"description": "Get all S3 users."
							},
							"response": [
								{
									"name": "/api/v2/<int:cluster_id>/s3/users/",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v2/{{cluster_id}}/s3/users/",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"{{cluster_id}}",
												"s3",
												"users",
												""
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": null,
									"cookie": [],
									"body": "{\n    \"data\": [\n        {\n            \"id\": int,\n            \"cluster_id\": int,\n            \"email\": str,\n            \"description\": str,\n            \"is_enabled\": bool,\n            \"keys\": [\n                {\n                    \"acc_key\": str,\n                    \"sec_key\": str\n                },\n                ...\n            ]\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "/api/v2/<int:cluster_id>/s3/users/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// chack status\r",
											"pm.test(\"Response is created\", function () {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"//check success\r",
											"pm.test(\"Response is success\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											"\r",
											"// pm.test(\"Status code is 404\", function () {\r",
											"//     pm.response.to.have.status(404);\r",
											"// });\r",
											"\r",
											"\r",
											"// //check format\r",
											"// pm.test(\"Response is json format\", function () {\r",
											"//     pm.response.to.be.json;\r",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email\": \\\"str\",\n    \"description\":\"str\",\n    \"is_enabled\": true,\n}"
								},
								"url": {
									"raw": "{{url}}/api/v2/{{cluster_id}}/s3/users/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"{{cluster_id}}",
										"s3",
										"users",
										""
									]
								},
								"description": "Create S3 user"
							},
							"response": [
								{
									"name": "/api/v2/<int:cluster_id>/s3/users/",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": str,\n    \"description\": str,\n    \"is_enabled\": bool,\n}"
										},
										"url": {
											"raw": "{{url}}/api/v2/{{cluster_id}}/s3/users/",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"{{cluster_id}}",
												"s3",
												"users",
												""
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "Text",
									"header": null,
									"cookie": [],
									"body": "{\n    \"id\": int,\n    \"cluster_id\": int,\n    \"email\": str,\n    \"description\": str,\n    \"is_enabled\": bool,\n    \"keys\": [\n        {\n            \"acc_key\": str,\n            \"sec_key\": str\n        },\n        ...\n    ]\n}"
								}
							]
						}
					]
				},
				{
					"name": "S3 user detail",
					"item": [
						{
							"name": "/api/v2/<int:cluster_id>/s3/users/<string:user_id>/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// chack status\r",
											"pm.test(\"Response is OK\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//check success\r",
											"pm.test(\"Response is success\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											"\r",
											"// pm.test(\"Status code is 404\", function () {\r",
											"//     pm.response.to.have.status(404);\r",
											"// });\r",
											"\r",
											"\r",
											"// //check format\r",
											"// pm.test(\"Response is json format\", function () {\r",
											"//     pm.response.to.be.json;\r",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v2/{{cluster_id}}/s3/users/{{user_id}}/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"{{cluster_id}}",
										"s3",
										"users",
										"{{user_id}}",
										""
									]
								},
								"description": "Get user detail"
							},
							"response": [
								{
									"name": "/api/v2/<int:cluster_id>/s3/users/<string:user_id>/",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v2/{{cluster_id}}/s3/users/{{user_id}}/",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"{{cluster_id}}",
												"s3",
												"users",
												"{{user_id}}",
												""
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "Text",
									"header": null,
									"cookie": [],
									"body": "{\n    \"id\": int,\n    \"cluster_id\": int,\n    \"email\": str,\n    \"description\": str,\n    \"is_enabled\": bool,\n    \"keys\": [\n        {\n            \"acc_key\": str,\n            \"sec_key\": str\n        },\n        ...\n    ]\n}"
								}
							]
						},
						{
							"name": "/api/v2/<int:cluster_id>/s3/users/<string:user_id>/ Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// chack status\r",
											"pm.test(\"Response is OK\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//check success\r",
											"pm.test(\"Response is success\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											"\r",
											"// pm.test(\"Status code is 404\", function () {\r",
											"//     pm.response.to.have.status(404);\r",
											"// });\r",
											"\r",
											"\r",
											"// //check format\r",
											"// pm.test(\"Response is json format\", function () {\r",
											"//     pm.response.to.be.json;\r",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"description\": \"str\",\n    \"is_enabled\": {{$randomBoolean}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v2/{{cluster_id}}/s3/users/{{user_id}}/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"{{cluster_id}}",
										"s3",
										"users",
										"{{user_id}}",
										""
									]
								},
								"description": "Change user info."
							},
							"response": [
								{
									"name": "/api/v2/<int:cluster_id>/s3/users/<string:user_id>/ Copy",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"str\",\n    \"is_enabled\": {{$randomBoolean}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v2/{{cluster_id}}/s3/users/{{user_id}}/",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"{{cluster_id}}",
												"s3",
												"users",
												"{{user_id}}",
												""
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "Text",
									"header": null,
									"cookie": [],
									"body": "{\n    \"id\": int,\n    \"cluster_id\": int,\n    \"email\": str,\n    \"description\": str,\n    \"is_enabled\": bool,\n    \"keys\": [\n        {\n            \"acc_key\": str,\n            \"sec_key\": str\n        },\n        ...\n    ]\n}   "
								}
							]
						},
						{
							"name": "/api/v2/<int:cluster_id>/s3/users/<string:user_id>/ Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// // chack status\r",
											"// pm.test(\"Response is OK\", function () {\r",
											"//     pm.response.to.be.ok;\r",
											"// });\r",
											"\r",
											"// pm.test(\"Status code is 200\", function () {\r",
											"//     pm.response.to.have.status(200);\r",
											"// });\r",
											"\r",
											"// //check success\r",
											"// pm.test(\"Response is success\", function () {\r",
											"//     pm.response.to.be.success;\r",
											"// });\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Status code is No Content\", function () {\r",
											"    pm.response.to.have.status(\"No Content\");\r",
											"});\r",
											"\r",
											"// pm.test(\"Status code is 404\", function () {\r",
											"//     pm.response.to.have.status(404);\r",
											"// });\r",
											"\r",
											"\r",
											"// //check format\r",
											"// pm.test(\"Response is json format\", function () {\r",
											"//     pm.response.to.be.json;\r",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v2/{{cluster_id}}/s3/users/{{user_id}}/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"{{cluster_id}}",
										"s3",
										"users",
										"{{user_id}}",
										""
									]
								},
								"description": "Remove user."
							},
							"response": [
								{
									"name": "/api/v2/<int:cluster_id>/s3/users/<string:user_id>/ Copy 2",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v2/{{cluster_id}}/s3/users/{{user_id}}/",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"{{cluster_id}}",
												"s3",
												"users",
												"{{user_id}}",
												""
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "Text",
									"header": null,
									"cookie": [],
									"body": null
								}
							]
						}
					]
				},
				{
					"name": "S3 bucket list",
					"item": [
						{
							"name": "/api/v2/<int:cluster_id>/s3/buckets/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// chack status\r",
											"pm.test(\"Response is OK\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//check success\r",
											"pm.test(\"Response is success\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											"\r",
											"// pm.test(\"Status code is 404\", function () {\r",
											"//     pm.response.to.have.status(404);\r",
											"// });\r",
											"\r",
											"\r",
											"// //check format\r",
											"// pm.test(\"Response is json format\", function () {\r",
											"//     pm.response.to.be.json;\r",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v2/{{cluster_id}}/s3/buckets/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"{{cluster_id}}",
										"s3",
										"buckets",
										""
									]
								},
								"description": "Get all S3 buckets"
							},
							"response": [
								{
									"name": "/api/v2/<int:cluster_id>/s3/buckets/",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v2/{{cluster_id}}/s3/buckets/",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"{{cluster_id}}",
												"s3",
												"buckets",
												""
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": null,
									"cookie": [],
									"body": "{\n    \"data\": [\n        {  \n            \"name: str\", // bucket name\n            \"owner: str\", // user email\n            \"owner_id\": str, // user id\n            \"creation_date\": date, \n            \"size\": int // bucket size,\n            \"is_np\": bool // is bucked registered with Notary Provider\n        }   \n    ]\n}"
								}
							]
						}
					]
				},
				{
					"name": "S3 bucket change",
					"item": [
						{
							"name": "/api/v2/<int:cluster_id>/s3/buckets/<string:name>/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// chack status\r",
											"pm.test(\"Response is OK\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//check success\r",
											"pm.test(\"Response is success\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											"\r",
											"// pm.test(\"Status code is 404\", function () {\r",
											"//     pm.response.to.have.status(404);\r",
											"// });\r",
											"\r",
											"\r",
											"// //check format\r",
											"// pm.test(\"Response is json format\", function () {\r",
											"//     pm.response.to.be.json;\r",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"is_np\": {{$randomBoolean}}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v2/{{cluster_id}}/s3/buckets/{{name}}/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"{{cluster_id}}",
										"s3",
										"buckets",
										"{{name}}",
										""
									]
								},
								"description": "Change the bucket registration in Notary Provider.\n\n**Value Description**\n\n- `is_np` - is bucket registered with Notary Provider."
							},
							"response": [
								{
									"name": "/api/v2/<int:cluster_id>/s3/buckets/<string:name>/",
									"originalRequest": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"is_np\": {{$randomBoolean}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v2/{{cluster_id}}/s3/buckets/{{name}}/",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"{{cluster_id}}",
												"s3",
												"buckets",
												"{{name}}",
												""
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "Text",
									"header": null,
									"cookie": [],
									"body": null
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "MDS",
			"item": [
				{
					"name": "MDSS",
					"item": [
						{
							"name": "/api/v2/<int:cluster_id>/mdss/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// chack status\r",
											"pm.test(\"Response is OK\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//check success\r",
											"pm.test(\"Response is success\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											"\r",
											"// pm.test(\"Status code is 404\", function () {\r",
											"//     pm.response.to.have.status(404);\r",
											"// });\r",
											"\r",
											"\r",
											"// //check format\r",
											"// pm.test(\"Response is json format\", function () {\r",
											"//     pm.response.to.be.json;\r",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v2/{{cluster_id}}/mdss/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"{{cluster_id}}",
										"mdss",
										""
									]
								},
								"description": "Provides info about all mds servers in cluster"
							},
							"response": [
								{
									"name": "/api/v2/<int:cluster_id>/mdss/",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v2/{{cluster_id}}/mdss/",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"{{cluster_id}}",
												"mdss",
												""
											]
										}
									},
									"_postman_previewlanguage": "Text",
									"header": null,
									"cookie": [],
									"body": "{\n    \"data\": [\n        {\n            \"error\": <string>,\n            \"host_info\": {\n                \"id\": <string>,\n                \"host\": <string>,\n            },\n            \"id\": <int>,\n            \"status\": <string>\n        },\n        {\n            \"cpu_usage\": <float>,\n            \"ctime\": <float>,\n            \"device\": <string>,\n            \"host_info\": {\n                \"id\": <string>,\n                \"host\": <string>,\n            },\n            \"id\": <int>,\n            \"ismaster\": <boolean>,\n            \"mem_usage\": <int>,\n            \"path\": <string>,\n            \"status\": <string>,\n            \"uptime\": <int>\n        },\n    ]\n}"
								}
							]
						},
						{
							"name": "/api/v2/<int:cluster_id>/mdss/ Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// chack status\r",
											"pm.test(\"Response is OK\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//check success\r",
											"pm.test(\"Response is success\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											"\r",
											"//save task_id\r",
											"var jsonData = JSON.parse(responseBody);\r",
											"pm.environment.set('task_id', jsonData.task_id);\r",
											"// console.log(jsonData.task_id);\r",
											"pm.test(\"task_id is saved\", function() {\r",
											"pm.expect(jsonData.task_id).to.eql(pm.environment.get('task_id'));\r",
											"});\r",
											"\r",
											"// pm.test(\"Status code is 404\", function () {\r",
											"//     pm.response.to.have.status(404);\r",
											"// });\r",
											"\r",
											"\r",
											"// //check format\r",
											"pm.test(\"Response is json format\", function () {\r",
											"    pm.response.to.be.json;\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"path\":\"unknown\",\n    \"node_id\":{{node_id}},\n    \"init_cluster\":true,\n    \"port\":8080, \n    \"password\":\"new_pass\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v2/{{cluster_id}}/mdss/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"{{cluster_id}}",
										"mdss",
										""
									]
								},
								"description": "Start task which create new mds.\n\n**Request description**\n\n`port` and `password` is optional. If `init_cluster` set in `true`, `password` must be set."
							},
							"response": [
								{
									"name": "/api/v2/<int:cluster_id>/mdss/",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v2/{{cluster_id}}/mdss/",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"{{cluster_id}}",
												"mdss",
												""
											]
										}
									},
									"_postman_previewlanguage": "json",
									"header": null,
									"cookie": [],
									"body": "{\n    \"task_id\": \"{{$randomUUID}}\"\n}"
								}
							]
						}
					]
				},
				{
					"name": "MDS",
					"item": [
						{
							"name": "/api/v2/<int:cluster_id>/mdss/<int:mds_id>/",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// chack status\r",
											"pm.test(\"Response is OK\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//check success\r",
											"pm.test(\"Response is success\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											"\r",
											"\r",
											"// pm.test(\"Status code is 404\", function () {\r",
											"//     pm.response.to.have.status(404);\r",
											"// });\r",
											"\r",
											"\r",
											"// //check format\r",
											"// pm.test(\"Response is json format\", function () {\r",
											"//     pm.response.to.be.json;\r",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v2/{{cluster_id}}/mdss/{{mds_id}}/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"{{cluster_id}}",
										"mdss",
										"{{mds_id}}",
										""
									]
								},
								"description": "Provides info about single mds"
							},
							"response": [
								{
									"name": "/api/v2/<int:cluster_id>/mdss/<int:mds_id>/",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v2/{{cluster_id}}/mdss/{{mds_id}}/",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"{{cluster_id}}",
												"mdss",
												"{{mds_id}}",
												""
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "Text",
									"header": null,
									"cookie": [],
									"body": "{\n    \"cpu_usage\": <float>,\n    \"ctime\": <float>,\n    \"device\": <string>,\n    \"host_info\": {\n        \"id\": <string>,\n        \"host\": <string>,\n    },\n    \"id\": <int>,\n    \"ismaster\": <boolean>,\n    \"mem_usage\": <int>,\n    \"path\": <string>,\n    \"status\": <string>,\n    \"uptime\": <int>\n}"
								}
							]
						},
						{
							"name": "/api/v2/<int:cluster_id>/mdss/<int:mds_id>/ Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// chack status\r",
											"pm.test(\"Response is OK\", function () {\r",
											"    pm.response.to.be.ok;\r",
											"});\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"//check success\r",
											"pm.test(\"Response is success\", function () {\r",
											"    pm.response.to.be.success;\r",
											"});\r",
											"\r",
											"\r",
											"// pm.test(\"Status code is 404\", function () {\r",
											"//     pm.response.to.have.status(404);\r",
											"// });\r",
											"\r",
											"\r",
											"// //check format\r",
											"// pm.test(\"Response is json format\", function () {\r",
											"//     pm.response.to.be.json;\r",
											"// });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v2/{{cluster_id}}/mdss/{{mds_id}}/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"{{cluster_id}}",
										"mdss",
										"{{mds_id}}",
										""
									]
								},
								"description": "Remove mds from cluster."
							},
							"response": [
								{
									"name": "/api/v2/<int:cluster_id>/mdss/<int:mds_id>/ Copy",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v2/{{cluster_id}}/mdss/{{mds_id}}/",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v2",
												"{{cluster_id}}",
												"mdss",
												"{{mds_id}}",
												""
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "Text",
									"header": null,
									"cookie": [],
									"body": null
								}
							]
						}
					]
				}
			],
			"description": "Meta data servers info and manipulations\n\nProvides 2 endpoints: `mdss` and `mds`."
		},
		{
			"name": "Meta",
			"item": [
				{
					"name": "/api/v2/meta/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// chack status\r",
									"pm.test(\"Response is OK\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//check success\r",
									"pm.test(\"Response is success\", function () {\r",
									"    pm.response.to.be.success;\r",
									"});\r",
									"\r",
									"\r",
									"// pm.test(\"Status code is 404\", function () {\r",
									"//     pm.response.to.have.status(404);\r",
									"// });\r",
									"\r",
									"\r",
									"// //check format\r",
									"// pm.test(\"Response is json format\", function () {\r",
									"//     pm.response.to.be.json;\r",
									"// });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/api/v2/meta/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"meta",
								""
							]
						},
						"description": "Provides info about all backend server endpoints"
					},
					"response": [
						{
							"name": "/api/v2/meta/",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/api/v2/meta/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"meta",
										""
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"<string: endpoint name>\": {\n        \"methods\": [\n            <string: method>,\n        ],\n        \"name\": <string: endpoint name>,\n        \"uri\": <string>\n    },\n}"
						}
					]
				}
			],
			"description": "**Info about all backend server endpoints**  \nProvides 1 endpoint \\`meta\\`"
		},
		{
			"name": "Performance",
			"item": [
				{
					"name": "/api/v2/performance_tests/<string:node_ip>/",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// chack status\r",
									"pm.test(\"Response is OK\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//check success\r",
									"pm.test(\"Response is success\", function () {\r",
									"    pm.response.to.be.success;\r",
									"});\r",
									"\r",
									"\r",
									"// pm.test(\"Status code is 404\", function () {\r",
									"//     pm.response.to.have.status(404);\r",
									"// });\r",
									"\r",
									"\r",
									"//save task_id\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set('task_id', jsonData.task_id);\r",
									"// console.log(jsonData.task_id);\r",
									"pm.test(\"task_id is saved\", function() {\r",
									"pm.expect(jsonData.task_id).to.eql(pm.environment.get('task_id'));\r",
									"});\r",
									"\r",
									"// //check format\r",
									"pm.test(\"Response is json format\", function () {\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"disks\":[\n{\n\"name\":\"string\"\n}\n]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/v2/performance_tests/{{node_ip}}/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"v2",
								"performance_tests",
								"{{node_ip}}",
								""
							]
						},
						"description": "Start task which test disk performance"
					},
					"response": [
						{
							"name": "/api/v2/performance_tests/<string:node_ip>/",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"disks\" : [\n        {\n            \"name\" : <string>\n        },\n    ]\n}"
								},
								"url": {
									"raw": "{{url}}/api/v2/performance_tests/{{node_ip}}/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v2",
										"performance_tests",
										"{{node_ip}}",
										""
									]
								}
							},
							"_postman_previewlanguage": "json",
							"header": null,
							"cookie": [],
							"body": "{\n    \"task_id\": \"{{$randomUUID}}\"\n}"
						}
					]
				}
			],
			"description": "**Disk performance tests on node**  \nProvides endpoint \\`performance_tests\\`"
		},
		{
			"name": "Notification (Websockets)",
			"item": [],
			"description": "# **Notification about tasks**\n\n## **url**\n\n```\nWebSocket /ws\n\n```\n\n## **Chat room**\n\n```\nnotify\n\n```\n\n## **Event**\n\n```\ntasks\n\n```\n\n## **Response**\n\n```\n{\n    \"event\": object,\n    \"task_id\": str,\n    \"state\": str,\n    \"error\": str,\n    \"debug\": {\n        \"dt\": YYYY-mm-ddTMM:HH:ss.fff,\n        \"traceback\": str,\n    }\n}\n\n```\n\n## **Example**\n\n``` javascript\n(function () {\n    // Create WebSocket object\n    var socket = io.connect('http://' + document.domain + ':' + location.port, {\"path\": \"/ws\"});\n\n    // Join to main chat room\n    socket.on('connect', function () {\n        socket.emit('join', 'notify');\n    });\n\n    // Listen tasks events\n    socket.on('tasks', function (data) {\n        // Do something\n    });\n)()\n\n```"
		}
	],
	"variable": [
		{
			"key": "variable_key",
			"value": ""
		},
		{
			"key": "cluster_id",
			"value": ""
		},
		{
			"key": "url",
			"value": "https://192.168.12.7:4648/"
		}
	]
}